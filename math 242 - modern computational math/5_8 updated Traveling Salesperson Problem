{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"5/8 updated Traveling Salesperson Problem","version":"0.3.2","provenance":[{"file_id":"13eCRUo1S6PLZIlTj8OnYv_Ju_t3KU2hp","timestamp":1557334159539}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"BJtmBDfgq125","colab_type":"text"},"source":["# Traveling Salesperson Problem\n","\n","_Math 242: Modern Computational Math_\n","\n","The Traveling Salesperson Problem (TSP) is a classic problem in combinatorial optimization. Given $N$ points in a plane, we want to find the shortest path that visits all $N$ points and returns to the starting point. This is a notoriously difficult problem (it's [NP-hard](https://en.wikipedia.org/wiki/NP-hardness)). The runtime of the best known algorithms for solving the problem exactly increases exponentially in $N$. However, we can use Markov chains to find an approximate solution."]},{"cell_type":"markdown","metadata":{"id":"EdXzc-ENs9_N","colab_type":"text"},"source":["## Setup\n","\n","We will create $N$ random points in the plane and plot them. The function `np.random.rand()` returns a matrix of random numbers, each chosen from the interval $[0,1)$, wich we will rescale by multiplying them by $10$. In the plot, we label each point by its index."]},{"cell_type":"code","metadata":{"id":"yZ3eroppwrUx","colab_type":"code","colab":{}},"source":["import matplotlib.pyplot as plt\n","import random\n","import numpy as np\n","import math"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"o4ov0AKSpwak","colab_type":"code","outputId":"09c4040b-69d6-4ae8-b667-33208d4faa51","executionInfo":{"status":"ok","timestamp":1557334858525,"user_tz":300,"elapsed":470,"user":{"displayName":"Zhaoliang Zhou","photoUrl":"","userId":"11420802199847110781"}},"colab":{"base_uri":"https://localhost:8080/","height":439}},"source":["N = 10 # number of points\n","\n","# generate random points\n","points = np.random.rand(N, 2) * 10\n","print(points)\n","\n","# make the plot\n","plt.plot(points[:,0], points[:,1], 'go') # plot the points\n","for i in range(N): # add text labels\n","    plt.text(points[i,0]+0.2, points[i,1]-0.1, str(i))\n","plt.xlim(0,10) # set the x-axis limits\n","plt.ylim(0,10) # set the y-axis limits\n","plt.show()     # show the plot"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[[4.6080682  2.36167302]\n"," [7.36768331 4.47575381]\n"," [2.63663722 1.92374175]\n"," [6.03570751 2.0731087 ]\n"," [8.39559558 3.04782142]\n"," [9.98400248 7.1065104 ]\n"," [9.89903487 0.36088358]\n"," [0.81095259 6.50029278]\n"," [1.64745379 3.03606351]\n"," [3.00294954 2.69291597]]\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\nSUVORK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"DmdrOhMxwuMl","colab_type":"text"},"source":["## Tours, Permutations, and Distances\n","\n","We want to find a path (also called a *tour*) that visits each point once and returns to the starting point.\n","One way to represent the tour is a permutation\n","$$t_0, t_1, \\ldots, t_{N-1}$$\n","of the indexes $0, 1, \\ldots, N-1$.\n","For example, $0, 1, \\ldots, N-1$ is be a tour &mdash; call it the _trivial tour_."]},{"cell_type":"code","metadata":{"id":"fGVDMeJO418p","colab_type":"code","outputId":"263bc91a-3655-43c3-a67d-bccfdd31004c","executionInfo":{"status":"ok","timestamp":1557334862054,"user_tz":300,"elapsed":446,"user":{"displayName":"Zhaoliang Zhou","photoUrl":"","userId":"11420802199847110781"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["trivialTour = list(range(N))\n","trivialTour"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"markdown","metadata":{"id":"MgRoZRaE4_7y","colab_type":"text"},"source":["This is probably not the shortest tour. Take a look:"]},{"cell_type":"code","metadata":{"id":"uKbxQox2t2JZ","colab_type":"code","outputId":"05a69f51-c4b4-4a51-ed2c-5a463789ca52","executionInfo":{"status":"ok","timestamp":1557334863665,"user_tz":300,"elapsed":463,"user":{"displayName":"Zhaoliang Zhou","photoUrl":"","userId":"11420802199847110781"}},"colab":{"base_uri":"https://localhost:8080/","height":269}},"source":["path = plt.Polygon(points, fill=None, edgecolor='0.5') # create the tour\n","plt.gca().add_patch(path) # add the tour to the plot\n","plt.plot(points[:,0], points[:,1], 'go') # plot the points\n","for i in range(N): # add text labels\n","    plt.text(points[i,0]+0.2, points[i,1]-0.1, str(i))\n","plt.xlim(0,10) # set the x-axis limits\n","plt.ylim(0,10) # set the y-axis limits\n","plt.show()     # show the plot"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"tJjsWzrS4ZOZ","colab_type":"text"},"source":["### Length of a tour\n","\n","We need a function that computes the length of a tour. Since a tour is made up out of a number of segments, we will start with the distance between two points."]},{"cell_type":"code","metadata":{"id":"g_yB8xYc4erq","colab_type":"code","colab":{}},"source":["# compute the distance between the ith and jth points on a tour\n","# assume the coordinates of points are stored in a global variable called `points`\n","def distPair(tour, i, j):\n","  x1 = points[tour[i],0] #index of ith point on the tour   #tour[j] index of jth point of the tour\n","  y1=points[tour[i],1]\n","  x2 = points[tour[j],0]\n","  y2 = points[tour[j],1]\n","  dis = math.sqrt((x2-x1)**2 + (y2-y1)**2)\n","  \n","  return dis"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"W11sE-Rl59Kl","colab_type":"text"},"source":["Check that your function works. Compare the output from the next line with an estimate of the distance from your graph above."]},{"cell_type":"code","metadata":{"id":"4_3FCwxQ5-dF","colab_type":"code","outputId":"ac5b9379-8af3-41ae-dd8e-b8413e8eba79","executionInfo":{"status":"ok","timestamp":1557334958946,"user_tz":300,"elapsed":554,"user":{"displayName":"Zhaoliang Zhou","photoUrl":"","userId":"11420802199847110781"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["distPair(trivialTour, 1, 2)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["5.375459295064117"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"markdown","metadata":{"id":"ZVmTL6iv6QJf","colab_type":"text"},"source":["Now compute the distance around an entire tour."]},{"cell_type":"code","metadata":{"id":"d7gq30FU6UE9","colab_type":"code","colab":{}},"source":["def distTour(tour):\n","  dist = 0\n","  N = len(tour)\n","  \n","  for i in range(N-1): # i from 0 to N-2\n","    # first point is tour[0] to tour[1], last pair is from tour[N-2] to tour[N-1]\n","    dist += distPair(tour, i, i+1)\n","    dist += distPair(tour, N-1, 0)\n","  return dist"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3T3nL7jp6qyi","colab_type":"text"},"source":["Try it out:"]},{"cell_type":"code","metadata":{"id":"oxsQgZCE6rp-","colab_type":"code","outputId":"c2e5bd93-3d0a-49f4-c2a9-2e10ae7b7a1a","executionInfo":{"status":"ok","timestamp":1557335017109,"user_tz":300,"elapsed":403,"user":{"displayName":"Zhaoliang Zhou","photoUrl":"","userId":"11420802199847110781"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["distTour(trivialTour)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["56.591989224288255"]},"metadata":{"tags":[]},"execution_count":16}]},{"cell_type":"markdown","metadata":{"id":"8XDYpsC57b1G","colab_type":"text"},"source":["### A random tour\n","\n","Now let's try a random tour. We can generate a random tour by a random sample of the integers from $0$ to $N-1$."]},{"cell_type":"code","metadata":{"id":"vrB16W8j7l6A","colab_type":"code","outputId":"f6b79e3f-5371-444f-cb56-c36771987cba","executionInfo":{"status":"ok","timestamp":1557335019934,"user_tz":300,"elapsed":347,"user":{"displayName":"Zhaoliang Zhou","photoUrl":"","userId":"11420802199847110781"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["randomTour = random.sample(range(N), N)\n","randomTour"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[9, 1, 4, 3, 0, 5, 7, 2, 6, 8]"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"markdown","metadata":{"id":"YWj1FW6T71v4","colab_type":"text"},"source":["What is the length of our random tour?"]},{"cell_type":"code","metadata":{"id":"uHqao0fi73oI","colab_type":"code","outputId":"1beefadb-f2e7-4375-ea9c-a4fc0a09b1c5","executionInfo":{"status":"ok","timestamp":1557335022106,"user_tz":300,"elapsed":386,"user":{"displayName":"Zhaoliang Zhou","photoUrl":"","userId":"11420802199847110781"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["distTour(randomTour)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["60.46205577914133"]},"metadata":{"tags":[]},"execution_count":18}]},{"cell_type":"markdown","metadata":{"id":"ajksfsry77pp","colab_type":"text"},"source":["Before plotting the random tour, let's write a function to make this and future plots easier."]},{"cell_type":"code","metadata":{"id":"tD0BUrQN8DYQ","colab_type":"code","colab":{}},"source":["def plotTour(tour):\n","  tourPts = np.zeros((N,2))\n","  for i in range(N):\n","    tourPts[i] = points[tour[i]]\n","    \n","  plt.figure(figsize=(10,10), dpi=60) # resize the plot\n","  path = plt.Polygon(tourPts, fill=None, edgecolor='0.5') # create the tour\n","  plt.gca().add_patch(path) # add the tour to the plot\n","  plt.plot(points[:,0], points[:,1], 'go') # plot the points\n","  for i in range(N): # add text labels\n","    plt.text(points[i,0]+0.2, points[i,1]-0.1, str(i))\n","  plt.xlim(0,10) # set the x-axis limits\n","  plt.ylim(0,10) # set the y-axis limits\n","  plt.show()     # show the plot"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"16Jwwgn-94d3","colab_type":"text"},"source":["Now plot the random tour. Note that in the following plot, the labels are the indexes of each point in the array `points`, _not_ the order that points are visited on the tour. Thus, the values in the list `randomTour`should appear in the same order as the points are visited in the plot."]},{"cell_type":"code","metadata":{"id":"zlhWM_aH9OAW","colab_type":"code","outputId":"60781c82-8504-4781-b945-c8983a4092af","executionInfo":{"status":"ok","timestamp":1557335027432,"user_tz":300,"elapsed":738,"user":{"displayName":"Zhaoliang Zhou","photoUrl":"","userId":"11420802199847110781"}},"colab":{"base_uri":"https://localhost:8080/","height":517}},"source":["print(\"random tour:\", randomTour)\n","\n","plotTour(randomTour)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["random tour: [9, 1, 4, 3, 0, 5, 7, 2, 6, 8]\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAfsAAAHjCAYAAAAkDrYkAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAAJOgAACToB8GSSSgAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJzs3XlQlPe+LvrnZWzGlkGZJwcGUYZu\nMBqnOESDs0ZIHECTlbVS+/yx9q6zd51du85e9+xb++zadXbVWnVv6t59slay4lJjXIAR44Qahyyn\nJEo3ICCzKIIIiswz3b/7hwsuKChgN2/328+nKlWx6YaHGHj6977f9/1JQggQERGRctnJHYCIiIjM\ni2VPRESkcCx7IiIihWPZExERKRzLnoiISOFeWfaSJKklSbolSVKnJEkL/vpYqiRJNyVJuiRJUvD0\nxCQiIqKpet3KvhvARgDHAECSJAcA/xXAOwD+DwC/MWc4IiIienOvLHshxIAQ4smIh+YBKBVC9Ash\nbgCIM2s6IiIiemMOk3y+F4D2EX+2H/lBSZJSAaQCQERERGpSUtKbpSMiIrJB2dnZeiGE1lSfb7Jl\n3wrAc8SfDSM/KITIBpANAGlpaSIrK+vN0hEREdkgSZKqTfn5Jlv2lQBiJElyApAE4I4pwxAREZHp\nvbbsJUk6CyABQBSA3wP4vwD8AKAXwD5zhiMiIqI399qyF0JsGOPhTDNkISIiIjPgTXWIiIgUjmVP\nRESkcCx7IiIihWPZExERKRzLnoiISOFY9kRERArHsiciIlI4lj0REZHCseyJiIgUjmVPRESkcCx7\nIiIihWPZExERKRzLnoiISOFY9kRERArHsiciIlI4lj0REZHCseyJiIgUjmVPRESkcCx7IiIihWPZ\nExERKRzLnoiISOFY9kRERArHsiciIlI4lj0REZHCseyJiIgUjmVPRESkcCx7IiIihWPZExERKRzL\nnoiISOFY9kRERArHsiciIlI4lj0REZHCseyJiIgUjmVPRESkcCx7IiIihWPZExERKRzLnoiISOFY\n9kRERArHsiciIlI4lj0REZHCseyJiIgUjmVPRESkcCx7IiIihWPZExERKRzLnoiISOFY9kRERArH\nsiciIlI4lj0REZHCseyJiIgUjmVPRESkcCx7IiIihWPZExERKRzLnoiISOFY9kRERArHsiciIlI4\n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\nueZaDVclcQAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 600x600 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"inB7nE0V-niv","colab_type":"text"},"source":["## Simulated annealing and the TSP\n","\n","Simulated annealing can find an approximate solution to the Traveling Salesperson Problem.\n","By now, we know that for any simulated annealing scenario, we need the following:\n","\n","* A well-defined set of states. In this case, all possible tours form the state space. Note that there are $(N - 1)!$ different tours. (We may regard the first point as fixed.)\n","* A function to minimize. We have the total distance function.\n","* A natural proposal transition. This is a little tricky.\n","\n","### Proposing a transition\n","\n","Consider a section of a tour:\n","\n","![original tour](https://drive.google.com/uc?export=view&id=1tkbQDnmXrPqSarUqGzTOwEIMq2j2gRYd)\n","\n","This tour is represented by the ordering:\n","$$t_0, \\ldots, t_5, t_6, t_7, t_8, t_9, t_{10}, t_{11}, \\ldots, t_{N-1}$$\n","\n","A simple proposal transition selects two locations, say those with index $6$ and $10$, and makes a transition by simply reversing the section of the tour from $t_6$ to $t_{10}$.\n","\n","That is, the proposed transition becomes:\n","$$t_0, \\ldots, t_5, t_{10}, t_9, t_8, t_7, t_6, t_{11}, \\ldots, t_{N-1}$$\n","\n","Geometrically, this uncrosses (or perhaps crosses) part of the path. Notice that:\n","\n","* Before, $t_5 \\to t_6$. After, $t_5 \\to t_{10}$.\n","* Before, $t_{10} \\to t_{11}$. After, $t_6 \\to t_{11}$.\n","* All the directions from $t_{10}$ to $t_6$ are reversed $t_{10} \\to t_9 \\to t_8 \\to t_7 \\to t_6$.\n","\n","The result is:\n","\n","![modified tour](https://drive.google.com/uc?export=view&id=1Rrl8xBUfYiWiqXlyBm6i7C8385t4pOYa)\n","\n","Generally speaking, the steps are:\n","\n","* Pick two sites $i < j$ at random. Note: in the example above, we picked $i = 6$ and $j = 10$.\n","* We need to pay special attention the case where $i = 0$ or $j = N-1$. Don’t allow both $i = 0$ and $j = N-1$.\n","* Reverse the positions tour from $t_i$ to $t_j$. In our case, this means the new proposed tour is:\n","$$t_0, \\ldots, t_{i-1}, t_j, t_{j-1}, t_{j-2}, \\ldots, t_{i+2}, t_{i+1}, t_i, t_{j+1}, \\ldots, t_{N-1}$$\n","* Compute the new total distance of the tour. As it turns out, this is really easy. Note between\n","the before and after tours, almost all of the pairwise distances are unchanged. The only things that change\n","between the two are:\n","    - The distances of $t_{i-1} \\to t_i$ and $t_j \\to t_{j+1}$ are removed.\n","    - The distances of $t_{i-1} \\to t_j$ and $t_i \\to t_{j+1}$ are added.\n","    - **Note:** If $i = 0$, replace $i - 1$ with $N-1$. If $j = N-1$, replace $j + 1$ with $0$.\n","    - All the other distances are unchanged. (For the segments in the middle of the reversed section, only the direction changes.)\n","\n","Hence, if $D_\\text{curr}$ is the current distance, you can compute the proposed distance $D_\\text{prop}$ simply by subtracting two distances and adding two distances. This can quite helpful if $N$ is large. You do not have to recompute the total distance each time!"]},{"cell_type":"markdown","metadata":{"id":"8-HKor68DLlb","colab_type":"text"},"source":["## Strategy\n","\n","To attack the TSP with simulated annealing, think about how to implement the proposal transition.\n","While you are doing so, keep track of the key sites $i$ and $j$, and the associated pairwise distances that contribute to the changes in the total distance. Rather than computing the total distance of the tour at each transition, it will be more efficient to simply compute the change in distance. However, this means the structure of our code will be slightly different than it has been for other simulated annealing problems.\n","\n","#### A general outline of your code:\n","\n","Start by implementing the two key functions `distPair` and `distTour` described above.\n","\n","Here is the setup for simulated anealing:"]},{"cell_type":"code","metadata":{"id":"C5LMbJPvDj5K","colab_type":"code","colab":{}},"source":["N = ??? # number of points\n","\n","# generate random points\n","points = np.random.rand(N, 2) * 10"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"N90LIRzeDv69","colab_type":"text"},"source":["For reference, plot the trivial tour and find its distance."]},{"cell_type":"code","metadata":{"id":"YqGV4G59D5kw","colab_type":"code","colab":{}},"source":["trivialTour = list(range(N))\n","print(\"trivial tour length:\", distTour(trivialTour))\n","plotTour(trivialTour)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wfqq4X21EeMT","colab_type":"text"},"source":["Now run simulated annealing. The following code block provides an outline of the code, with some missing pieces for you to fill in. Instead of using a `doMove()` funciton, the code is written in one big `for` loop. This is a bit more convienient due to our strategy of not re-computing the entire distance at each transition."]},{"cell_type":"code","metadata":{"id":"QtPzQ0oPEslY","colab_type":"code","colab":{}},"source":["currTour = random.sample(range(N), N) # start with a random tour\n","\n","numSteps = ??? # number of steps\n","sig2 = ??? # starting value for sigma^2\n","decFac = ??? # decrease factor\n","\n","dist = distTour(currTour) # this is the only time we need to call distTour()\n","\n","for s in range(numSteps):\n","  # choose two indexes i < j, from the set {0, 1, ..., N-1}\n","  # make sure it is not the case that i = 0 and j = N-1 (if this occurs, you could just use `continue` to try again)\n","  ???\n","  ???\n","  \n","  # compute the distance lost and the distance gained\n","  distLost = ???\n","  distGain = ???\n","  deltaDist = distGain - distLost\n","  \n","  # compute rho\n","  # avoid overflow when deltaDist is negative and sig2 is very close to zero\n","  rho = 1\n","  if deltaDist > 0:\n","    rho = math.exp(-deltaDist/sig2)\n","    \n","  rand = random.random()    # random number between 0 and 1\n","  if rand < rho:\n","    # then accept the proposed transition\n","    # this involves updating currTour by reversing part of the tour\n","    ???\n","    ???\n","    # also make sure you update dist\n","    dist = ???\n","    \n","  # otherwise, no transition\n","  \n","  # decrease sigma^2\n","  sig2 = sig2*decFac\n","  \n","  # If you want, print sig2 and dist every 100 steps. This is a useful check.\n","  if s % 100 == 0:\n","    print(\"sig2:\", sig2, \", dist:\", dist)\n","    \n","    \n","# display the results\n","print(\"Finished. Distance is:\", dist)\n","plotTour(currTour)\n","\n","  \n","  "],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5JJi03dxG8YI","colab_type":"text"},"source":["## Project\n","\n","Use simulated annealing to find approximate solutions to the Traveling Salesperson Project. Put your work in a new Colab notebook. Then implement one extension, as detailed in the [TSP Project file](https://www.mlwright.org/teaching/math242s19/files/2019-05-06_TSP_project.pdf)."]},{"cell_type":"code","metadata":{"id":"uhwvG9QY5VaG","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}