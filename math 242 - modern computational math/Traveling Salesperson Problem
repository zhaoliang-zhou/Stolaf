{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Traveling Salesperson Problem","version":"0.3.2","provenance":[{"file_id":"13eCRUo1S6PLZIlTj8OnYv_Ju_t3KU2hp","timestamp":1557162341151}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"BJtmBDfgq125","colab_type":"text"},"source":["# Traveling Salesperson Problem\n","\n","_Math 242: Modern Computational Math_\n","\n","The Traveling Salesperson Problem (TSP) is a classic problem in combinatorial optimization. Given $N$ points in a plane, we want to find the shortest path that visits all $N$ points and returns to the starting point. This is a notoriously difficult problem (it's [NP-hard](https://en.wikipedia.org/wiki/NP-hardness)). The runtime of the best known algorithms for solving the problem exactly increases exponentially in $N$. However, we can use Markov chains to find an approximate solution."]},{"cell_type":"markdown","metadata":{"id":"EdXzc-ENs9_N","colab_type":"text"},"source":["## Setup\n","\n","We will create $N$ random points in the plane and plot them. The function `np.random.rand()` returns a matrix of random numbers, each chosen from the interval $[0,1)$, wich we will rescale by multiplying them by $10$. In the plot, we label each point by its index."]},{"cell_type":"code","metadata":{"id":"yZ3eroppwrUx","colab_type":"code","colab":{}},"source":["import matplotlib.pyplot as plt\n","import random\n","import numpy as np\n","import math"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"o4ov0AKSpwak","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":439},"outputId":"6edb2f58-c8fc-4c49-f74e-7346288bc252","executionInfo":{"status":"ok","timestamp":1557162470891,"user_tz":300,"elapsed":501,"user":{"displayName":"Zhaoliang Zhou","photoUrl":"","userId":"11420802199847110781"}}},"source":["N = 10 # number of points\n","\n","# generate random points\n","points = np.random.rand(N, 2) * 10\n","print(points)\n","\n","# make the plot\n","plt.plot(points[:,0], points[:,1], 'go') # plot the points\n","for i in range(N): # add text labels\n","    plt.text(points[i,0]+0.2, points[i,1]-0.1, str(i))\n","plt.xlim(0,10) # set the x-axis limits\n","plt.ylim(0,10) # set the y-axis limits\n","plt.show()     # show the plot"],"execution_count":3,"outputs":[{"output_type":"stream","text":["[[4.28801898 8.91459029]\n"," [2.58920517 1.75741015]\n"," [7.74088469 9.60508   ]\n"," [9.01250133 8.91476882]\n"," [6.93667871 3.92024149]\n"," [6.64925921 2.80714311]\n"," [8.91411513 3.28348448]\n"," [5.38673822 2.98571004]\n"," [8.32995535 2.30760883]\n"," [1.41574466 6.85216998]]\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"C2ZWGVK8I8dL","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":187},"outputId":"93860157-77fc-4603-90f4-fb005c137358","executionInfo":{"status":"ok","timestamp":1557162880804,"user_tz":300,"elapsed":421,"user":{"displayName":"Zhaoliang Zhou","photoUrl":"","userId":"11420802199847110781"}}},"source":["points = np.random.rand(N, 2) * 10\n","points"],"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[5.93580022, 8.54087241],\n","       [7.38540911, 9.04019309],\n","       [5.88097663, 3.59154252],\n","       [9.7971089 , 8.91859072],\n","       [1.98785928, 9.38774054],\n","       [6.34730506, 9.34075634],\n","       [5.5104342 , 5.45637874],\n","       [5.70170227, 3.91030272],\n","       [9.03654812, 2.93843867],\n","       [6.26128589, 8.23649299]])"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"code","metadata":{"id":"_ltOhfGkJBg2","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"f644e71e-eafc-4baa-ec0d-9e6fda26b840","executionInfo":{"status":"ok","timestamp":1557162944147,"user_tz":300,"elapsed":386,"user":{"displayName":"Zhaoliang Zhou","photoUrl":"","userId":"11420802199847110781"}}},"source":["(points[0][0])**2"],"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["35.23372427027333"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"markdown","metadata":{"id":"DmdrOhMxwuMl","colab_type":"text"},"source":["## Tours, Permutations, and Distances\n","\n","We want to find a path (also called a *tour*) that visits each point once and returns to the starting point.\n","One way to represent the tour is a permutation\n","$$t_0, t_1, \\ldots, t_{N-1}$$\n","of the indexes $0, 1, \\ldots, N-1$.\n","For example, $0, 1, \\ldots, N-1$ is be a tour &mdash; call it the _trivial tour_."]},{"cell_type":"code","metadata":{"id":"fGVDMeJO418p","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"5f8f97c3-4a82-4bd2-b73f-9b5f29c4b748","executionInfo":{"status":"ok","timestamp":1557162559813,"user_tz":300,"elapsed":356,"user":{"displayName":"Zhaoliang Zhou","photoUrl":"","userId":"11420802199847110781"}}},"source":["trivialTour = list(range(N))\n","trivialTour"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"markdown","metadata":{"id":"MgRoZRaE4_7y","colab_type":"text"},"source":["This is probably not the shortest tour. Take a look:"]},{"cell_type":"code","metadata":{"id":"uKbxQox2t2JZ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":269},"outputId":"ae26fec8-bc43-4f85-e5d8-8721d7fdd9fc","executionInfo":{"status":"ok","timestamp":1557162579674,"user_tz":300,"elapsed":614,"user":{"displayName":"Zhaoliang Zhou","photoUrl":"","userId":"11420802199847110781"}}},"source":["path = plt.Polygon(points, fill=None, edgecolor='0.5') # create the tour\n","plt.gca().add_patch(path) # add the tour to the plot\n","plt.plot(points[:,0], points[:,1], 'go') # plot the points\n","for i in range(N): # add text labels\n","    plt.text(points[i,0]+0.2, points[i,1]-0.1, str(i))\n","plt.xlim(0,10) # set the x-axis limits\n","plt.ylim(0,10) # set the y-axis limits\n","plt.show()     # show the plot"],"execution_count":5,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n9P8DJB0jAI0BCC8AAAAASUVORK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"tJjsWzrS4ZOZ","colab_type":"text"},"source":["### Length of a tour\n","\n","We need a function that computes the length of a tour. Since a tour is made up out of a number of segments, we will start with the distance between two points."]},{"cell_type":"code","metadata":{"id":"g_yB8xYc4erq","colab_type":"code","colab":{}},"source":["# compute the distance between the ith and jth points on a tour\n","# assume the coordinates of points are stored in a global variable called `points`\n","def distPair(tour, i, j):\n","  x1 = points[tour[i],0] #index of ith point on the tour   #tour[j] index of jth point of the tour\n","  y1=points[tour[i],1]\n","  x2 = points[tour[j],0]\n","  y2 = points[tour[j],1]\n","  dis = math.sqrt((x2-x1)**2 + (y2-y1)**2)\n","  \n","  \n","  return dis"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"hQtzM6IjKikl","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"2e29b246-55b9-4063-f654-093cef6b1c1b","executionInfo":{"status":"ok","timestamp":1557163322539,"user_tz":300,"elapsed":447,"user":{"displayName":"Zhaoliang Zhou","photoUrl":"","userId":"11420802199847110781"}}},"source":["distPair(trivialTour, 1,2)"],"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["5.652531300247451"]},"metadata":{"tags":[]},"execution_count":18}]},{"cell_type":"markdown","metadata":{"id":"W11sE-Rl59Kl","colab_type":"text"},"source":["Check that your function works. Compare the output from the next line with an estimate of the distance from your graph above."]},{"cell_type":"code","metadata":{"id":"4_3FCwxQ5-dF","colab_type":"code","colab":{}},"source":["distPair(tour, 1, 2)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZVmTL6iv6QJf","colab_type":"text"},"source":["Now compute the distance around an entire tour."]},{"cell_type":"code","metadata":{"id":"d7gq30FU6UE9","colab_type":"code","colab":{}},"source":["def distTour(tour): \n","  dist = 0\n","  N = len(tour)\n","  \n","  for i in range(N-1): # i from 0 to N-2\n","    # first point is tour[0] to tour[1], last pair is from tour[N-2] to tour[N-1]\n","    dist += distPair(tour, i, i+1)\n","    dist += distPair(tour, N-1, 0)\n","  \n","  \n","  return dist"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3T3nL7jp6qyi","colab_type":"text"},"source":["Try it out:"]},{"cell_type":"code","metadata":{"id":"oxsQgZCE6rp-","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"aee6e7d8-9b4c-4e0a-c295-c8b6591c34c7","executionInfo":{"status":"ok","timestamp":1557163851293,"user_tz":300,"elapsed":342,"user":{"displayName":"Zhaoliang Zhou","photoUrl":"","userId":"11420802199847110781"}}},"source":["distTour(trivialTour)"],"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["44.97692841495323"]},"metadata":{"tags":[]},"execution_count":20}]},{"cell_type":"markdown","metadata":{"id":"8XDYpsC57b1G","colab_type":"text"},"source":["### A random tour\n","\n","Now let's try a random tour. We can generate a random tour by a random sample of the integers from $0$ to $N-1$."]},{"cell_type":"code","metadata":{"id":"vrB16W8j7l6A","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"0f4942da-4928-4388-f133-53a8a4d3d3f1","executionInfo":{"status":"ok","timestamp":1557163912362,"user_tz":300,"elapsed":419,"user":{"displayName":"Zhaoliang Zhou","photoUrl":"","userId":"11420802199847110781"}}},"source":["randomTour = random.sample(range(N), N)\n","randomTour"],"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[1, 3, 9, 8, 7, 2, 6, 0, 5, 4]"]},"metadata":{"tags":[]},"execution_count":21}]},{"cell_type":"markdown","metadata":{"id":"YWj1FW6T71v4","colab_type":"text"},"source":["What is the length of our random tour?"]},{"cell_type":"code","metadata":{"id":"uHqao0fi73oI","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"2989f738-aca4-45e9-bd4d-f08933faa65a","executionInfo":{"status":"ok","timestamp":1557163924022,"user_tz":300,"elapsed":206,"user":{"displayName":"Zhaoliang Zhou","photoUrl":"","userId":"11420802199847110781"}}},"source":["distTour(randomTour)"],"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["74.78874443137805"]},"metadata":{"tags":[]},"execution_count":22}]},{"cell_type":"markdown","metadata":{"id":"ajksfsry77pp","colab_type":"text"},"source":["Before plotting the random tour, let's write a function to make this and future plots easier."]},{"cell_type":"code","metadata":{"id":"tD0BUrQN8DYQ","colab_type":"code","colab":{}},"source":["def plotTour(tour):\n","  tourPts = np.zeros((N,2))\n","  for i in range(N):\n","    tourPts[i] = points[tour[i]]\n","    \n","  path = plt.Polygon(tourPts, fill=None, edgecolor='0.5') # create the tour\n","  plt.gca().add_patch(path) # add the tour to the plot\n","  plt.plot(points[:,0], points[:,1], 'go') # plot the points\n","  for i in range(N): # add text labels\n","    plt.text(points[i,0]+0.2, points[i,1]-0.1, str(i))\n","  plt.xlim(0,10) # set the x-axis limits\n","  plt.ylim(0,10) # set the y-axis limits\n","  plt.show()     # show the plot"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"yMtzYh1PNGrK","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"16Jwwgn-94d3","colab_type":"text"},"source":["Now plot the random tour. Note that in the following plot, the labels are the indexes of each point in the array `points`, _not_ the order that points are visited on the tour. Thus, the values in the list `randomTour`should appear in the same order as the points are visited in the plot."]},{"cell_type":"code","metadata":{"id":"zlhWM_aH9OAW","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":286},"outputId":"943aa78c-bba9-41c7-a795-ec00293da432","executionInfo":{"status":"ok","timestamp":1557163972846,"user_tz":300,"elapsed":582,"user":{"displayName":"Zhaoliang Zhou","photoUrl":"","userId":"11420802199847110781"}}},"source":["print(\"random tour:\", randomTour)\n","\n","plotTour(randomTour)"],"execution_count":27,"outputs":[{"output_type":"stream","text":["random tour: [1, 3, 9, 8, 7, 2, 6, 0, 5, 4]\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\niOFORGRC/x/UtuERlQ3JmAAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"inB7nE0V-niv","colab_type":"text"},"source":["## Simulated annealing and the TSP\n","\n","Simulated annealing can find an approximate solution to the Traveling Salesperson Problem.\n","By now, we know that for any simulated annealing scenario, we need the following:\n","\n","* A well-defined set of states. In this case, all possible tours form the state space. Note that there are $(N - 1)!$ different tours. (We may regard the first point as fixed.)\n","* A function to minimize. We have the total distance function.\n","* A natural proposal transition. This is a little tricky.\n","\n","### Proposing a transition\n","\n","Consider a section of a tour:\n","\n","![original tour](https://drive.google.com/uc?export=view&id=1tkbQDnmXrPqSarUqGzTOwEIMq2j2gRYd)\n","\n","This tour is represented by the ordering:\n","$$t_0, \\ldots, t_5, t_6, t_7, t_8, t_9, t_{10}, t_{11}, \\ldots, t_{N-1}$$\n","\n","A simple proposal transition selects two locations, say those with index $6$ and $10$, and makes a transition by simply reversing the section of the tour from $t_6$ to $t_{10}$.\n","\n","That is, the proposed transition becomes:\n","$$t_0, \\ldots, t_5, t_{10}, t_7, t_8, t_9, t_6, t_{11}, \\ldots, t_{N-1}$$\n","\n","Geometrically, this uncrosses (or perhaps crosses) part of the path. Notice that:\n","\n","* Before, $t_5 \\to t_6$. After, $t_5 \\to t_{10}$.\n","* Before, $t_{10} \\to t_{11}$. After, $t_6 \\to t_{11}$.\n","* All the directions from $t_{10}$ to $t_6$ are reversed $t_{10} \\to t_9 \\to t_8 \\to t_7 \\to t_6$.\n","\n","The result is:\n","\n","![modified tour](https://drive.google.com/uc?export=view&id=\n","1Rrl8xBUfYiWiqXlyBm6i7C8385t4pOYa)\n","\n","Generally speaking, the steps are:\n","\n","* Pick two sites $i < j$ at random. Note: in the example above, we picked $i = 6$ and $j = 10$.\n","* We need to pay special attention the case where $i = 0$ or $j = N-1$. Don’t allow both $i = 0$ and $j = N-1$.\n","* Reverse the positions tour from $t_i$ to $t_j$. In our case, this means the new proposed tour is:\n","$$t_0, \\ldots, t_{i-1}, t_j, t_{j-1}, t_{j-2}, \\ldots, t_{i+2}, t_{i+1}, t_i, t_{j+1}, \\ldots, t_{N-1}$$\n","* Compute the new total distance of the tour. As it turns out, this is really easy. Note between\n","the before and after tours, almost all of the pairwise distances are unchanged. The only things that change\n","between the two are:\n","    - The distances of $t_{i-1} \\to t_i$ and $t_j \\to t_{j+1}$ are removed.\n","    - The distances of $t_{i-1} \\to t_j$ and $t_i \\to t_{j+1}$ are added.\n","    - **Note:** If $i = 0$, replace $i - 1$ with $N-1$. If $j = N-1$, replace $j + 1$ with $0$.\n","    - All the other distances are unchanged. (For the segments in the middle of the reversed section, only the direction changes.)\n","\n","Hence, if $D_\\text{curr}$ is the current distance, you can compute the proposed distance $D_\\text{prop}$ simply by subtracting two distances and adding two distances. This can quite helpful if $N$ is large. You do not have to recompute the total distance each time!"]},{"cell_type":"markdown","metadata":{"id":"8-HKor68DLlb","colab_type":"text"},"source":["## Strategy\n","\n","To attack the TSP with simulated annealing, think about how to implement the proposal transition.\n","While you are doing so, keep track of the key sites $i$ and $j$, and the associated pairwise distances that contribute to the changes in the total distance. Rather than computing the total distance of the tour at each transition, it will be more efficient to simply compute the change in distance. However, this means the structure of our code will be slightly different than it has been for other simulated annealing problems.\n","\n","#### A general outline of your code:\n","\n","Start by implementing the two key functions `distPair` and `distTour` described above.\n","\n","Here is the setup for simulated anealing:"]},{"cell_type":"code","metadata":{"id":"C5LMbJPvDj5K","colab_type":"code","colab":{}},"source":["N = ??? # number of points\n","\n","# generate random points\n","points = np.random.rand(N, 2) * 10"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"N90LIRzeDv69","colab_type":"text"},"source":["For reference, plot the trivial tour and find its distance."]},{"cell_type":"code","metadata":{"id":"YqGV4G59D5kw","colab_type":"code","colab":{}},"source":["trivialTour = list(range(N))\n","print(\"trivial tour length:\", distTour(trivialTour))\n","plotTour(trivialTour)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wfqq4X21EeMT","colab_type":"text"},"source":["Now run simulated annealing. The following code block provides an outline of the code, with some missing pieces for you to fill in. Instead of using a `doMove()` funciton, the code is written in one big `for` loop. This is a bit more convienient due to our strategy of not re-computing the entire distance at each transition."]},{"cell_type":"code","metadata":{"id":"QtPzQ0oPEslY","colab_type":"code","colab":{}},"source":["currTour = random.sample(range(N), N) # start with a random tour\n","\n","numSteps = ??? # number of steps\n","sig2 = ??? # starting value for sigma^2\n","decFac = ??? # decrease factor\n","\n","dist = distTour(currTour) # this is the only time we need to call distTour()\n","\n","for s in range(numSteps):\n","  # choose two indexes i < j, from the set {0, 1, ..., N-1}\n","  # make sure it is not the case that i = 0 and j = N-1 (if this occurs, you could just use `continue` to try again)\n","  ???\n","  ???\n","  \n","  # compute the distance lost and the distance gained\n","  distLost = ???\n","  distGain = ???\n","  deltaDist = distGain - distLost\n","  \n","  # compute rho\n","  rho = math.exp(-deltaDist/sig2)\n","  \n","  rand = random.random()    # random number between 0 and 1\n","  if rand < rho:\n","    # then accept the proposed transition\n","    # this involves updating currTour by reversing part of the tour\n","    ???\n","    ???\n","    # also make sure you update dist\n","    dist = ???\n","    \n","  # otherwise, no transition\n","  \n","  # decrease sigma^2\n","  sig2 = sig2*decFac\n","  \n","  # If you want, print sig2 and dist every 100 steps. This is a useful check.\n","  if s % 100 == 0:\n","    print(\"sig2:\", sig2, \", dist:\", dist)\n","    \n","    \n","# display the results\n","print(\"Finished. Distance is:\", dist)\n","plotTour(currTour)\n","\n","  \n","  "],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5JJi03dxG8YI","colab_type":"text"},"source":["## Project\n","\n","Use simulated annealing to find approximate solutions to the Traveling Salesperson Project. Put your work in a new Colab notebook.Then implement one extension, as detailed in the [TSP Project file](https://www.mlwright.org/teaching/math242s19/files/2019-05-06_TSP_project.pdf)."]}]}