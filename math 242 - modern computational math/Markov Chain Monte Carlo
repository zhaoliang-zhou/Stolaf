{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Markov Chain Monte Carlo","version":"0.3.2","provenance":[{"file_id":"1w98iY5VIUcD17MF11VpKPv0u84jrpkkm","timestamp":1556297611491}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"metadata":{"id":"hw-X7Zl0x_Ol","colab_type":"text"},"cell_type":"markdown","source":["# Markov Chain Monte Carlo\n","\n","Suppose we want to create a Markov chain with a given steady-state distribution $p = (p_0, ..., p_{n-1})$. Last time, we learned a method for doing this: start with a proposal transition matrix $Q$, and then modify it to obtain the actual transition matrix $P$. \n","\n","However, the approach from last time doesn't scale well. Suppose our Markov chain has 1,000,000 states. Then we would need to build a 1,000,000 $\\times$ 1,000,000 matrix, which is too big to work with (e.g., it won't fit in your computer's memory).\n","\n","Instead, we will use a method called _Markov Chain Monte Carlo_ (MCMC) to simulate the Markov chain using an \"agent\" moving around for lots of time steps. MCMC will allow us to solve some really cool problems next week.\n","\n","MCMC is based on the method we used last time to construct the transition matrix. \n","If the agent is in state $S_j$, then the agent proposes a transition to another state $S_i$.\n","The agent then moves as follows:\n","\n","* If $p_j \\le p_i$, then the agent moves from $S_j$ to $S_i$.\n","* If $p_j > p_i$, then the agent moves from $S_j$ to $S_i$ __with probability__ $\\rho = \\frac{p_i}{p_j}$ and stays at $S_j$ with probability $1-\\rho$."]},{"metadata":{"id":"yRPMs725x75S","colab_type":"code","colab":{}},"cell_type":"code","source":["# first, import some packages\n","\n","import numpy as np\n","import random\n","import matplotlib.pyplot as plt\n","import math"],"execution_count":0,"outputs":[]},{"metadata":{"id":"MmSJ56Ue1IsU","colab_type":"text"},"cell_type":"markdown","source":["## A Small Example\n","\n","We will simulate an agent moving around on a Markov chain with states $S_0, S_1, S_2, S_3$. We want the steady-state distribution with relative frequencies 1, 2, 3, and 4. In otherwords, state $S_i$ has relative frequency $i+1$.\n","\n","Let's look at some code that starts the agent at a state and simulates one move."]},{"metadata":{"id":"DyyIyinl5IPU","colab_type":"code","outputId":"08a52a0c-93ba-4bb2-bdab-0d65934856aa","executionInfo":{"status":"ok","timestamp":1556741384572,"user_tz":300,"elapsed":528,"user":{"displayName":"Zhaoliang Zhou","photoUrl":"","userId":"11420802199847110781"}},"colab":{"base_uri":"https://localhost:8080/","height":85}},"cell_type":"code","source":["n = 4  # number of states\n","\n","# define a function that returns the relative frequency of state i\n","# (we use a function, not a list, because it will scale better when the number of state is huge)\n","def f(i):\n","  return i+1\n","\n","\n","currState = 1 # agent starts at this state\n","print(\"starting state:\", currState)\n","\n","\n","# select the proposed transition state\n","if currState == 0:\n","  propState = random.choice([0, 1])\n","elif currState == n-1:\n","  propState = random.choice([currState - 1, currState])\n","else:\n","  propState = random.choice([currState - 1, currState + 1])\n","  \n","print(\"proposed state:\", propState)\n","  \n","# now decide whether or not to move to the proposed state\n","currFreq = f(currState)\n","propFreq = f(propState)\n","if(currFreq <= propFreq):  # then move\n","  currState = propState\n","  print(\"p_i <= p_j, so move to the proposed state\")\n","else:\n","  rho = propFreq/currFreq\n","  print(\"rho:\", rho)\n","  rand = random.random() ## a random number between 0 and 1 \n","  print(\"random:\", rand)\n","  doMove = (rand < rho) # True with probability rho; False with probability 1 - rho\n","  if doMove:\n","    currState = propState\n","  # else: nothing to do\n","\n","print(\"new state:\", currState)"],"execution_count":10,"outputs":[{"output_type":"stream","text":["starting state: 1\n","proposed state: 2\n","p_i <= p_j, so move to the proposed state\n","new state: 2\n"],"name":"stdout"}]},{"metadata":{"id":"XhFizW7P8yJ8","colab_type":"text"},"cell_type":"markdown","source":["Run the code above several times, with different starting states, to get a feel for how it works. The print statements are there to help you see what is going on as the code runs."]},{"metadata":{"id":"TgrLee1I9NRK","colab_type":"text"},"cell_type":"markdown","source":["We want to run the code above lots of times, keeping track of the states visited. To make this easier, we will put the code into a function (without the print statements)."]},{"metadata":{"id":"Y7VuCbhR9-Qq","colab_type":"code","colab":{}},"cell_type":"code","source":["n = 4 # number of states\n","\n","# function to return the relative frequency of state i\n","def f(i):\n","  return i+1\n","\n","# function to simulate one move\n","def doMove(currState):\n","  # select the proposed transition state\n","  if currState == 0:\n","    propState = random.choice([0, 1])\n","  elif currState == n-1:\n","    propState = random.choice([currState - 1, currState])\n","  else:\n","    propState = random.choice([currState - 1, currState + 1])\n","\n","  # now decide whether or not to move to the proposed state\n","  currFreq = f(currState)\n","  propFreq = f(propState)\n","  if(currFreq <= propFreq):  # then move\n","    currState = propState\n","  else:\n","    rho = propFreq/currFreq\n","    rand = random.random()\n","    doMove = (rand < rho) # True with probability rho; False with probability 1 - rho\n","    if doMove:\n","      currState = propState\n","    # else: nothing to do\n","\n","  return currState"],"execution_count":0,"outputs":[]},{"metadata":{"id":"vi0lmDya-rdV","colab_type":"text"},"cell_type":"markdown","source":["Try it out:"]},{"metadata":{"id":"N2kZpkOB5upp","colab_type":"code","outputId":"000e057a-de0b-46ce-9d4f-74e4ca5c7602","executionInfo":{"status":"ok","timestamp":1556743068157,"user_tz":300,"elapsed":313,"user":{"displayName":"Zhaoliang Zhou","photoUrl":"","userId":"11420802199847110781"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["doMove(100)"],"execution_count":36,"outputs":[{"output_type":"execute_result","data":{"text/plain":["99"]},"metadata":{"tags":[]},"execution_count":36}]},{"metadata":{"id":"rxqw3BiS-vL8","colab_type":"text"},"cell_type":"markdown","source":["Run the simulation for a lot of steps:"]},{"metadata":{"id":"itkEwnES5wHL","colab_type":"code","colab":{}},"cell_type":"code","source":["numSteps = 10000\n","visited = np.zeros(n) # counts the number of times each state is visited\n","currState = 1\n","for i in range(numSteps):\n","  visited[currState] += 1\n","  currState = doMove(currState)\n","\n","#print(visited)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"1GdWWDU4ANZY","colab_type":"text"},"cell_type":"markdown","source":["Make a bar chart to show how many times each state was visited:"]},{"metadata":{"id":"L_icD80v_s8J","colab_type":"code","outputId":"e3c6b53f-fd68-4921-8a81-3ce5c79926f3","executionInfo":{"status":"ok","timestamp":1556743092435,"user_tz":300,"elapsed":498,"user":{"displayName":"Zhaoliang Zhou","photoUrl":"","userId":"11420802199847110781"}},"colab":{"base_uri":"https://localhost:8080/","height":283}},"cell_type":"code","source":["plt.bar(range(n), visited)\n","plt.xticks(range(n), range(n))\n","plt.xlabel(\"state index\")\n","plt.ylabel(\"number of times visited\");"],"execution_count":43,"outputs":[{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAY4AAAEKCAYAAAAFJbKyAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAGwRJREFUeJzt3XuwXWWd5vHvQ7iKlwQ5UjEJhpbY\nDHZrxGOkB8cRUEjAbmjHC3hLM0yn244tlE5rUKtRlCpoS+nGEcYokWAjNIo2EaKYwjCIyiWBEEgi\nzRkJQ2KEYAC5lCjhmT/We2B7PJe1krPP3ifn+VSt2mv91rvW+u1dcH5Zt/eVbSIiIurardMJRETE\n+JLCERERjaRwREREIykcERHRSApHREQ0ksIRERGNpHBEREQjKRwREdFICkdERDSye6cTaIf999/f\nM2fO7HQaERHjyurVqx+y3TNSu12ycMycOZNVq1Z1Oo2IiHFF0n112uVSVURENJLCERERjaRwRERE\nIykcERHRSApHREQ0ksIRERGNpHBEREQjKRwREdFICkdERDSyS745HhET18xF13Q6hY7aeM7xbT9G\n2884JE2SdLukq8vyQZJultQn6d8k7Vnie5XlvrJ+Zss+zijxuyUd2+6cIyJiaGNxqeo0YEPL8rnA\nebYPBh4GTi3xU4GHS/y80g5JhwInAa8E5gIXSJo0BnlHRMQg2lo4JE0Hjge+WpYFHAV8qzRZCpxY\n5k8oy5T1R5f2JwCX237K9r1AHzCnnXlHRMTQ2n3G8c/AR4FnyvKLgUdsP12WNwHTyvw04H6Asv7R\n0v7Z+CDbRETEGGtb4ZD0VuBB26vbdYwBx1sgaZWkVVu3bh2LQ0ZETEjtPOM4AvgLSRuBy6kuUf0L\nMFlS/9Nc04HNZX4zMAOgrH8R8KvW+CDbPMv2Ytu9tnt7ekYchyQiInZQ2wqH7TNsT7c9k+rm9g9t\nvwdYCby9NJsPXFXml5Vlyvof2naJn1SeujoImAXc0q68IyJieJ14j+NjwOWSPgvcDlxU4hcBX5fU\nB2yjKjbYXifpCmA98DSw0Pb2sU87IiJgjAqH7euB68v8zxnkqSjbvwHeMcT2ZwNnty/DiIioK12O\nREREIykcERHRSApHREQ0ksIRERGNpHBEREQjKRwREdFICkdERDSSwhEREY2kcERERCMpHBER0UgK\nR0RENJLCERERjaRwREREIykcERHRSApHREQ0ksIRERGNtK1wSNpb0i2S7pC0TtKnS/xiSfdKWlOm\n2SUuSedL6pO0VtJhLfuaL+meMs0f6pgREdF+7RwB8CngKNuPS9oDuFHS98q6f7D9rQHt51GNJz4L\neD1wIfB6SfsBZwK9gIHVkpbZfriNuUdExBDadsbhyuNlcY8yeZhNTgAuKdvdBEyWNBU4Flhhe1sp\nFiuAue3KOyIihtfWexySJklaAzxI9cf/5rLq7HI56jxJe5XYNOD+ls03ldhQ8YiI6IC2Fg7b223P\nBqYDcyT9CXAGcAjwOmA/4GOjcSxJCyStkrRq69ato7HLiIgYxJg8VWX7EWAlMNf2lnI56inga8Cc\n0mwzMKNls+klNlR84DEW2+613dvT09OOrxEREbT3qaoeSZPL/D7AW4CflfsWSBJwInBX2WQZ8P7y\ndNXhwKO2twDXAsdImiJpCnBMiUVERAe086mqqcBSSZOoCtQVtq+W9ENJPYCANcDflvbLgeOAPuBJ\n4BQA29skfQa4tbQ7y/a2NuYdERHDaFvhsL0WeM0g8aOGaG9g4RDrlgBLRjXBiIjYIXlzPCIiGknh\niIiIRlI4IiKikRSOiIhoJIUjIiIaSeGIiIhGhnwcV9JjDNMpoe0XtiWjiIjoakMWDtsvACgv320B\nvk710t57qF7ui4iICajOpaq/sH2B7cds/9r2hVRdoEdExARUp3A8Iek9pYv03SS9B3ii3YlFRER3\nqlM43g28E3igTO8osYiImIBG7KvK9kZyaSoiIooRzzgkvULSdZLuKsuvkvTJ9qcWERHdqM6lqq9Q\njdr3O3i219uT2plURER0rzqF43m2bxkQe7odyURERPerUzgekvRyysuAkt5O9V5HRERMQHUKx0Lg\ny8AhkjYDp/PcqH1DkrS3pFsk3SFpnaRPl/hBkm6W1Cfp3yTtWeJ7leW+sn5my77OKPG7JR27A98z\nIiJGSZ3CYdtvBnqAQ2y/oeZ2TwFH2X41MBuYW8YSPxc4z/bBwMPAqaX9qcDDJX5eaYekQ6nuqbwS\nmAtcUIajjYiIDqgzdOyVwGG2W1/6+xbw2uE2KkPBPl4W9yiTgaN47j2QpcCngP630T/Vsv//JUkl\nfrntp4B7JfUBc4Cf1sg9YtyZueiaTqfQURvPOb7TKcQIhuvk8BCqf+W/SNLbWla9ENi7zs7LmcFq\n4GDgS8D/BR6x3X9zfRMwrcxPA+4HsP20pEeBF5f4TS27bd0mIiLG2HBnHH8MvBWYDPx5S/wx4K/r\n7Nz2dmC2pMnAd4BDdjDPEUlaACwAOPDAA9t1mIiICW+43nGvAq6S9Ge2d+qykO1HJK0E/gyYLGn3\nctYxHdhcmm0GZgCbJO0OvAj4VUu8X+s2rcdYDCwG6O3tHbI7+IiI2DlD3uSW9NEy+25J5w+cRtqx\npJ5ypoGkfYC3ABuAlcDbS7P5wFVlfllZpqz/YblPsgw4qTx1dRAwCxj4XklERIyR4S5VbSifq3Zw\n31OBpeU+x27AFbavlrQeuFzSZ4HbgYtK+4uAr5eb39sob6fbXifpCmA91YuHC8slsIiI6IDhLlV9\nt3wu7Y9J2g14vu1fj7Tj0jXJawaJ/5zqqaiB8d9Q9bw72L7OBs4e6ZgREdF+dTo5/IakF0raF7gL\nWC/pH9qfWkREdKM6L/IdWs4wTgS+BxwEvK+tWUVERNeqUzj2kLQHVeFYZvt3lH6rIiJi4qlTOL4M\nbAT2BW6Q9DJgxHscERGxa6ozAuD5QOvjt/dJOrJ9KUVERDcbrsuR99r+V0kfHqLJF9qUU0REdLHh\nzjj2LZ8vGItEIiJifBjuPY4vl9kLbG8do3wiIqLL1bk5/mNJP5B0qqQpbc8oIiK62oiFw/YrgE9S\ndbG+WtLVkt7b9swiIqIr1TnjwPYttj9M1VXINqoBmCIiYgKq0+XICyXNl/Q94CfAFgbpayoiIiaG\nOkPH3gH8O3DWzo7LERER41+dwvFHZVyMiIiIWjfHUzQiIuJZtW6OR0RE9EvhiIiIRuo8VfVP5cmq\nPSRdJ2lrnfc4JM2QtFLSeknrJJ1W4p+StFnSmjId17LNGZL6JN0t6diW+NwS65O0aEe/bERE7Lw6\nZxzHlIGc3krVvfrBQJ0RAJ8GPmL7UOBwYKGkQ8u682zPLtNygLLuJKoXDecCF0iaVMYs/xIwDzgU\nOLllPxERMcbqPFXV3+Z44Ju2H5U04ka2t1C984HtxyRtAKYNs8kJwOW2nwLuldTHc++L9JWxypF0\neWm7vkbuERExyuqccVwt6WfAa4HrJPUAv2lyEEkzgdcAN5fQByWtlbSkpf+racD9LZttKrGh4gOP\nsUDSKkmrtm5Nn4wREe1S53HcRcB/BnrLsLFPUv2LvxZJzweuBE4vl7wuBF4OzKY6I/n8DuQ9WJ6L\nbffa7u3p6RmNXUZExCDq3Bx/HvB3VH/wAV4K9NbZeRmr/ErgUtvfBrD9gO3ttp8BvsJzl6M2AzNa\nNp9eYkPFIyKiA+pcqvoa8Fuqsw6o/mh/dqSNVN0IuQjYYPsLLfGpLc3+ErirzC8DTpK0l6SDgFnA\nLcCtwCxJB0nak+oG+rIaeUdERBvUuTn+ctvvknQygO0nVefuOBwBvA+4U9KaEvs41VNRswFTPaX1\nN2W/6yRdQXXT+2lgoe3tAJI+CFwLTAKW2F5X9wtGRMToqlM4fitpH6o/9Eh6OfDUSBvZvhEYrMAs\nH2abs4GzB4kvH267iIgYO3UKx5nA94EZki6lOpP4q3YmFRER3WvEwmF7haTbqF7iE3Ca7YfanllE\nRHSlun1VTaO6v7An8EZJb2tfShER0c1GPOOQtAR4FbAOeKaEDXy7jXlFRESXqnOP4/DS31RERESt\nS1U/TaeCERHRr84ZxyVUxeOXVI/himpgwFe1NbOIiOhKdQrHRZQX+XjuHkdERExQdQrHVtvp4iMi\nIoB6heN2Sd8AvkvLG+P9nRZGRMTEUqdw7ENVMI5pieVx3IiICarOm+OnjEUiERExPgxZOCR91PY/\nSfoipYPDVrY/1NbMIiKiKw13xrGhfK4ai0QiImJ8GLJw2P5umX3S9jdb10l6R1uzioiIrlXnzfEz\nasYiImICGLJwSJpX7m9Mk3R+y3Qx1Qh9w5I0Q9JKSeslrZN0WonvJ2mFpHvK55QSV9l/n6S1kg5r\n2df80v4eSfN3+ltHRMQOG+6M4xdU9zd+A6xumZYBx9bY99PAR0oHiYcDC0ufV4uA62zPAq4rywDz\nqMYZnwUsAC6EqtBQDSb1emAOcGZ/sYmIiLE33D2OO4A7JH3D9u+a7tj2FmBLmX9M0gaqcT1OAN5U\nmi0Frgc+VuKX2DZwk6TJkqaWtitsbwOQtAKYC1zWNKeIiNh5I97j2JGiMZCkmcBrgJuBA0pRAfgl\ncECZnwbc37LZphIbKh4RER1QdwTAHSbp+cCVwOm2f926rpxd/ME7Ijt4nAWSVklatXXr1tHYZURE\nDGK4m+NfL5+n7ejOJe1BVTQubenb6oFyCYry+WCJbwZmtGw+vcSGiv8e24tt99ru7enp2dGUIyJi\nBMOdcbxW0kuB/y5pSnka6tlppB1LElWX7Btsf6Fl1TKg/8mo+cBVLfH3l6erDgceLZe0rgWOKTlM\noeoz69pG3zIiIkbNcG+O/2+qp57+iOppKrWsc4kP5wjKOB6S1pTYx4FzgCsknQrcB7yzrFsOHAf0\nAU8CpwDY3ibpM8Ctpd1Z/TfKozvNXHRNp1PoqI3nHN/pFCLaarinqs4Hzpd0oe0PNN2x7Rv5/WLT\n6uhB2htYOMS+lgBLmuYQERGjr07vuB+Q9Grgv5TQDbbXtjetiIjoViM+VSXpQ8ClwEvKdKmkv293\nYhER0Z3qDOT0P4DX234CQNK5wE+BL7YzsYiI6E513uMQsL1leTtD37uIiIhdXJ0zjq8BN0v6Tlk+\nkeox24iImIDq3Bz/gqTrgTeU0Cm2b29rVhER0bXqnHFg+zbgtjbnEhER40Db+6qKiIhdSwpHREQ0\nMmzhkDRJ0sqxSiYiIrrfsIXD9nbgGUkvGqN8IiKiy9W5Of44VUeFK4An+oO2P9S2rCIiomvVKRzf\nLlNERESt9ziWStoHOND23WOQU0REdLE6nRz+ObAG+H5Zni1pWbsTi4iI7lTncdxPAXOARwBsr2Hk\nQZwiImIXVadw/M72owNiz4y0kaQlkh6UdFdL7FOSNktaU6bjWtadIalP0t2Sjm2Jzy2xPkmL6nyp\niIhonzqFY52kdwOTJM2S9EXgJzW2uxiYO0j8PNuzy7QcQNKhwEnAK8s2F5R3SCYBXwLmAYcCJ5e2\nERHRIXUKx99T/UF/CrgM+DVw+kgb2b4BqDs2+AnA5bafsn0v1bjjc8rUZ/vntn8LXF7aRkREh4xY\nOGw/afsTVOOEH2n7E7Z/sxPH/KCkteVS1pQSmwbc39JmU4kNFY+IiA6p81TV6yTdCaylehHwDkmv\n3cHjXQi8HJgNbAE+v4P7+QOSFkhaJWnV1q1bR2u3ERExQJ1LVRcBf2d7pu2ZwEKqwZ0as/2A7e22\nnwG+QnUpCmAzMKOl6fQSGyo+2L4X2+613dvT07Mj6UVERA11Csd22z/qX7B9I/D0jhxM0tSWxb8E\n+p+4WgacJGkvSQcBs4BbgFuBWZIOkrQn1Q30vEMSEdFBQ745LumwMvt/JH2Z6sa4gXcB14+0Y0mX\nAW8C9pe0CTgTeJOk2WU/G4G/AbC9TtIVwHqqorSwdLCIpA8C1wKTgCW21zX+lhERMWqG63Jk4P2H\nM1vmPdKObZ88SHjIscptnw2cPUh8ObB8pONFRMTYGLJw2D5yLBOJiIjxYcRODiVNBt4PzGxtn27V\nIyImpjrdqi8HbgLupEZXIxERsWurUzj2tv3htmcSERHjQp3Hcb8u6a8lTZW0X//U9swiIqIr1Tnj\n+C3wOeATPPc0lUnX6hERE1KdwvER4GDbD7U7mYiI6H51LlX1AU+2O5GIiBgf6pxxPAGskbSSqmt1\nII/jRkRMVHUKx7+XKSIiYuTCYXvpWCQSERHjQ503x+9lkL6pbOepqoiICajOparelvm9gXcAeY8j\nImKCqjN07K9aps22/xk4fgxyi4iILlTnUtVhLYu7UZ2B1DlTiYiIXVCdAtA6LsfTVAMwvbMt2URE\nRNer81RVxuWIiIhnjXiPo4wD/m5JH5f0j/1Tje2WSHpQ0l0tsf0krZB0T/mcUuKSdL6kPklrWy+P\nSZpf2t8jaf6OftGIiBgddbocuQo4geoy1RMt00guBuYOiC0CrrM9C7iuLAPMA2aVaQFwIVSFhmrI\n2tcDc4Az+4tNRER0Rp17HNNtDywAI7J9g6SZA8InAG8q80uB64GPlfgltg3cJGmypKml7Qrb2wAk\nraAqRpc1zSciIkZHnTOOn0j601E63gG2t5T5XwIHlPlpwP0t7TaV2FDxPyBpgaRVklZt3bp1lNKN\niIiB6hSONwCrJd1d7j/cKWntzh64nF38wRvpO7G/xbZ7bff29PSM1m4jImKAOpeq5o3i8R6QNNX2\nlnIp6sES3wzMaGk3vcQ289ylrf749aOYT0RENFTnzfH7Bpt28HjLgP4no+ZT3Xjvj7+/PF11OPBo\nuaR1LXCMpCnlpvgxJRYRER3StjfAJV1Gdbawv6RNVE9HnQNcIelU4D6ee5FwOXAczw0adQqA7W2S\nPgPcWtqd1X+jvJ1mLrqm3YfoahvPSY8yETG0thUO2ycPseroQdoaWDjEfpYAS0YxtYiI2Al1bo5H\nREQ8K4UjIiIaSeGIiIhGUjgiIqKRFI6IiGgkhSMiIhpJ4YiIiEZSOCIiopEUjoiIaCSFIyIiGknh\niIiIRlI4IiKikRSOiIhoJIUjIiIaSeGIiIhGUjgiIqKRjhQOSRsl3SlpjaRVJbafpBWS7imfU0pc\nks6X1CdpraTDOpFzRERUOnnGcaTt2bZ7y/Ii4Drbs4DryjLAPGBWmRYAF455phER8axuulR1ArC0\nzC8FTmyJX+LKTcBkSVM7kWBERHSucBj4gaTVkhaU2AG2t5T5XwIHlPlpwP0t224qsYiI6IDdO3Tc\nN9jeLOklwApJP2tdaduS3GSHpQAtADjwwANHL9OIiPg9HTnjsL25fD4IfAeYAzzQfwmqfD5Ymm8G\nZrRsPr3EBu5zse1e2709PT3tTD8iYkIb88IhaV9JL+ifB44B7gKWAfNLs/nAVWV+GfD+8nTV4cCj\nLZe0IiJijHXiUtUBwHck9R//G7a/L+lW4ApJpwL3Ae8s7ZcDxwF9wJPAKWOfckRE9BvzwmH758Cr\nB4n/Cjh6kLiBhWOQWkRE1NBNj+NGRMQ4kMIRERGNpHBEREQjKRwREdFICkdERDSSwhEREY2kcERE\nRCMpHBER0UgKR0RENJLCERERjaRwREREIykcERHRSApHREQ0ksIRERGNpHBEREQjKRwREdHIuCkc\nkuZKultSn6RFnc4nImKiGheFQ9Ik4EvAPOBQ4GRJh3Y2q4iIiWlcFA5gDtBn++e2fwtcDpzQ4Zwi\nIiak8VI4pgH3tyxvKrGIiBhju3c6gdEiaQGwoCw+LunuTuazk/YHHurUwXVup448avL77Zz8fjtn\nPP9+L6vTaLwUjs3AjJbl6SX2LNuLgcVjmVS7SFplu7fTeYxX+f12Tn6/nTMRfr/xcqnqVmCWpIMk\n7QmcBCzrcE4RERPSuDjjsP20pA8C1wKTgCW213U4rYiICWlcFA4A28uB5Z3OY4zsEpfcOii/387J\n77dzdvnfT7Y7nUNERIwj4+UeR0REdIkUji6SblV2jqQlkh6UdFencxlvJM2QtFLSeknrJJ3W6ZzG\nG0l7S7pF0h3lN/x0p3Nql1yq6hKlW5X/AN5C9YLjrcDJttd3NLFxRNIbgceBS2z/SafzGU8kTQWm\n2r5N0guA1cCJ+e+vPkkC9rX9uKQ9gBuB02zf1OHURl3OOLpHulXZSbZvALZ1Oo/xyPYW27eV+ceA\nDaR3hkZcebws7lGmXfJf5ikc3SPdqkRXkDQTeA1wc2czGX8kTZK0BngQWGF7l/wNUzgi4lmSng9c\nCZxu+9edzme8sb3d9myq3i3mSNolL5mmcHSPEbtViWincl3+SuBS29/udD7jme1HgJXA3E7n0g4p\nHN0j3apEx5QbuxcBG2x/odP5jEeSeiRNLvP7UD3o8rPOZtUeKRxdwvbTQH+3KhuAK9KtSjOSLgN+\nCvyxpE2STu10TuPIEcD7gKMkrSnTcZ1OapyZCqyUtJbqH4IrbF/d4ZzaIo/jRkREIznjiIiIRlI4\nIiKikRSOiIhoJIUjIiIaSeGIiIhGUjgihiDpdEnPG612A7Y5S9KbG26zUdL+TbaJaIc8jhsxBEkb\ngV7bD41Gu7HKJ6LdcsYRE56kfSVdU8ZRuEvSuyR9CHgp1QtdK0u7CyWtah1rYYh2x0j6qaTbJH2z\n9P808JgXS3p7md8o6dOl/Z2SDinxF0v6QTneVwG1bP/eMvbDGklfLp3rvUzSPZL2l7SbpB9JOqbN\nP19MQCkcEVV/Qr+w/eoyjsf3bZ8P/AI40vaRpd0nbPcCrwL+q6RXDWxXLiV9Eniz7cOAVcCHa+Tw\nUGl/IfA/S+xM4EbbrwS+AxwIIOk/Ae8Cjigd6m0H3mP7PuDcso+PAOtt/2BnfpiIweze6QQiusCd\nwOclnQtcbftHQ7R7p6QFVP/fTAUOBdYOaHN4if+46v6JPam6QRlJf6eCq4G3lfk39s/bvkbSwyV+\nNPBa4NZyjH2ouvHG9lclvQP4W2B2jeNGNJbCEROe7f+QdBhwHPBZSdfZPqu1jaSDqM4EXmf7YUkX\nA3sPsjtR9VF0csM0niqf2xn5/0sBS22f8Qcrqpv008vi84HHGuYRMaJcqooJT9JLgSdt/yvwOeCw\nsuox4AVl/oXAE8Cjkg4A5rXsorXdTcARkg4u+95X0it2MLUbgHeX/cwDppT4dcDbJb2krNtP0svK\nunOBS4F/BL6yg8eNGFbOOCLgT4HPSXoG+B3wgRJfDHxf0i/K/YvbqbrJvh/4ccv2A9v9FXCZpL3K\n+k9SjSff1KfLftYBPwH+H4Dt9ZI+CfxA0m4l54Vl5L7XUd372C7pv0k6xfbXduDYEUPK47gREdFI\nLlVFREQjKRwREdFICkdERDSSwhEREY2kcERERCMpHBER0UgKR0RENJLCERERjfx/plAyMXxzi3oA\nAAAASUVORK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"metadata":{"id":"tmDVIAHTASrO","colab_type":"text"},"cell_type":"markdown","source":["This looks good! The values are roughly in the same proportion as 1, 2, 3, 4."]},{"metadata":{"id":"4dSy3_7SAcxs","colab_type":"text"},"cell_type":"markdown","source":["## Assignment\n","\n","### Problem 1\n","\n","Now suppose the interval $[0,1]$ divided into $N+1$ evenly spaced states:\n","$$0, \\frac{1}{N}, \\frac{2}{N}, \\dots, \\frac{N}{N}=1$$\n","\n","Suppose that $N$ is quite large, e.g., $N=1000$.\n","For the desired steady-state distribution, we will use the very simple function $f(x)=x$. Note that this again gives the relative frequencies, not the probabilities. \n","\n","Define a proposal transition in a manner similar to what we did above. \n","Specifically:\n","* If $j=0$, then propose $i=0$ or $i=\\frac{1}{N}$ with equal probability.\n","* If $j=1$, then propose $i=1$ or $i=\\frac{N-1}{N}$ with equal probability.\n","* Otherwise, propose $i = j \\pm \\frac{1}{N}$ with equal probability.\n","\n","Don't set up a huge transition matrix $T$. Instead, use an agent to move around the states for a large number of time steps.\n","\n","Set this up and run an agent-based simulation.\n","Use a small $N$ until you get the simulation working, then use $N = 1000$ or more.\n","Let the agent run around the states for a while (100,000 or more steps). \n","Keep track of where the agent goes. \n","Do you see the steady-state distribution emerge in the samples? \n","\n","### Problem 2\n","\n","Change the interval to $(-1,1)$ and chop it up into $N$ evenly spaced points (states). To define the steady-state distribution, use frequencies given by\n","$$f(x) = e^{-20x^2}$$\n","Generate at least 100,000 steps of an agent trail and keep track of the results. \n","What is the steady-state distribution?\n","What does the histogram look like?\n","\n","### Handing in your work\n","\n","Submit your solutions (code and histograms) to the MCMC assignment on Moodle.\n","You should submit a PDF output of your Colab notebook.\n","\n","Please delete the examples and discussion prior to the assignment from the file that you turn in.\n","This is an assignment, not a project, so it is not necessary to provide a lot of discussion about your answers.\n","\n","This assignment is due on **Wednesday, May 1**."]},{"metadata":{"id":"J8GPTuegAEay","colab_type":"text"},"cell_type":"markdown","source":["#Problem 1"]},{"metadata":{"id":"bU6D39-z_8pf","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]}]}