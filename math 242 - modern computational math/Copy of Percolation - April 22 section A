{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Percolation - April 22 section A","provenance":[{"file_id":"1Ujlp2hfds5kObXE_2cR6OnNl6SAiaq_s","timestamp":1556061357506},{"file_id":"1vAygtdwetxeBJvxtxHTokn4Ngu4PF3BA","timestamp":1555951578899},{"file_id":"1blp11ycnyOoK7tprPABGn0jc0tK82Cq0","timestamp":1555692454394},{"file_id":"1entOyEuy4W9qTDU6FA26NtLOyCtqAdJF","timestamp":1555679453751},{"file_id":"1C1NG6Zb_WxtvpUZhc_oVHwej8Ko2yiE-","timestamp":1555523257885}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"XCXN1cWqc-pp","colab_type":"text"},"source":["_This notebook is from Math 242 A, in class on April 22, 2019._"]},{"cell_type":"markdown","metadata":{"id":"6MlG9b0_v3C4","colab_type":"text"},"source":["# Percolation: Recursive Depth-First Search\n","\n","Consider a $n \\times n$ grid of squares. Each square is either \"open\" with probability $p$ or \"closed\" with probability $1-p$. A liquid is poured on the top of the grid. What is the probability that the liquid will be able to flow from the top of the grid to the bottom through a path of open squares? "]},{"cell_type":"markdown","metadata":{"id":"lTnm-8qYwVwz","colab_type":"text"},"source":["## Setup"]},{"cell_type":"markdown","metadata":{"id":"l8vLRra9wuhm","colab_type":"text"},"source":["Import some necessary modules:"]},{"cell_type":"code","metadata":{"id":"vAu9ph83vwiu","colab_type":"code","colab":{}},"source":["import random\n","import math\n","import numpy"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MHFcAHl9w2Z3","colab_type":"text"},"source":["Define variables:\n","\n","* `n`: the number of rows and columns in the grid\n","* `p`: probability that a square is \"open\""]},{"cell_type":"code","metadata":{"id":"DGu3cliWxIxe","colab_type":"code","colab":{}},"source":["n = 10\n","p = 0.7"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"35ha-LIAxdIL","colab_type":"text"},"source":["Define a data structure for the $n \\times n$ grid. Here, we use a numpy 2D array, each entry of which is either 0 or 1. Suppose that 0 represents an open square  and 1 represents a closed square. We fill the grid so that each square is open with probability $p$. Here is one way to do it:"]},{"cell_type":"code","metadata":{"id":"ZPA9xN4Amfj4","colab_type":"code","outputId":"223d0f2c-dafd-4722-d490-0100dfd215d0","executionInfo":{"status":"error","timestamp":1588288945933,"user_tz":360,"elapsed":1140,"user":{"displayName":"Madison Valent","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjLfFWitXP5A0dS95ducgKO-08_JiIlVK7GjvvSCQ=s64","userId":"12826540996192144743"}},"colab":{"base_uri":"https://localhost:8080/","height":181}},"source":["# use numpy to generate a matrix of random numbers between 0 and 1, then convert to either 0 or 1\n","grid = (numpy.random.rand(n, n) > p).astype(int)\n","grid"],"execution_count":0,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-10-76b93db10d01>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mgrid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mnumpy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrand\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0mp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'numpy' is not defined"]}]},{"cell_type":"markdown","metadata":{"id":"hM2lGTTjx1pF","colab_type":"text"},"source":["Now we need to determine whether there exists a path of open cells from the top to the bottom of the grid.\n","\n","_How should we do this? What sort of algorithm would work best?_"]},{"cell_type":"markdown","metadata":{"id":"ECQn4VhlwXho","colab_type":"text"},"source":["## Depth-First Search\n","\n","We will use a depth-first search (DFS) algorithm to determine whether there is an open path from the top of the grid to the bottom. One way to implement this algorithm is to write a recursive function. We will build up to this function in several steps."]},{"cell_type":"markdown","metadata":{"id":"IB7Y2zHHwvq8","colab_type":"text"},"source":["__Warm-up:__ Write a recursive function called `search()` that traverses a single column of the grid from top to bottom. "]},{"cell_type":"code","metadata":{"id":"1ZhyKX25id2u","colab_type":"code","outputId":"3e7e9e66-bba5-4647-a045-db3676b0a84a","executionInfo":{"status":"ok","timestamp":1588288949854,"user_tz":360,"elapsed":599,"user":{"displayName":"Madison Valent","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjLfFWitXP5A0dS95ducgKO-08_JiIlVK7GjvvSCQ=s64","userId":"12826540996192144743"}},"colab":{"base_uri":"https://localhost:8080/","height":357}},"source":["def search(row):\n","  print(\"searching row \", row)\n","  #search the next square\n","  if row + 1 < n:\n","    search(row + 1) #run the function and does that unil row + 1 = n since not true anymore and does back down. Showing us how recursion works. \n","  print(\"finished searching row \", row)\n","  \n","search(0)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["searching row  0\n","searching row  1\n","searching row  2\n","searching row  3\n","searching row  4\n","searching row  5\n","searching row  6\n","searching row  7\n","searching row  8\n","searching row  9\n","finished searching row  9\n","finished searching row  8\n","finished searching row  7\n","finished searching row  6\n","finished searching row  5\n","finished searching row  4\n","finished searching row  3\n","finished searching row  2\n","finished searching row  1\n","finished searching row  0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"EPgUe6O4w6cO","colab_type":"text"},"source":["__Next:__ Modify your function so that it also searches all neighboring squares that haven't been searched yet. This will require keeping track of which squares have been searched. For now, don't worry about which squares are open or closed."]},{"cell_type":"code","metadata":{"id":"DmF6oY4RxSRw","colab_type":"code","colab":{}},"source":["########## CODE FROM MATH 242A ##########\n","\n","# define an exception that will be raised if percolation occurs\n","class percolationFound(Exception): \n","  pass\n","\n","# matrix to indicate which squares have been searched\n","\n","# define the search function\n","def search (row, col):\n","  #print(\"searching row \", row, \" and column \", col)\n","  \n","  # remember that this square has been visited\n","  visited[row,col] = 1\n","  \n","  # if we are at the bottom row, then stop\n","  if row == n-1:\n","    raise percolationFound  # raise an exception to indicate that percolation has been found\n","  elif visited[row+1, col] == 0 and grid[row+1, col] == 0: # then search down\n","    search(row + 1, col)\n","  \n","  # search left\n","  if col > 0 and visited[row, col-1] == 0 and grid[row, col-1] == 0:\n","    search(row, col - 1)\n","  \n","  # search right\n","  if col < n-1 and visited[row, col+1] == 0 and grid[row, col+1] == 0:\n","    search(row, col + 1)\n","  \n","  # search up\n","  if row > 0 and visited[row-1, col] == 0 and grid[row-1, col] == 0:\n","    search(row - 1, col)\n","  \n","  #print(\"finished searching row \", row, \" and column \", col)\n","  \n","# define a function to start searching at each cell in the top row\n","def findPercolation():\n","  # matrix to indicate which squares have been searched\n","  global visited\n","  visited = numpy.zeros((n,n))  # 0 indicates not yet visited\n","  \n","  try:\n","    for i in range(n):\n","      #if the top cell in column i is open and not visited, start searching there\n","      if grid[0,i] == 0 and visited[0,i] == 0:\n","        search(0,i)\n","  except percolationFound:\n","    #print(\"percolation found!\")\n","    return True  # percolation found\n","  else:\n","    #print(\"no percolation.\")\n","    return False # percolation not found\n","  "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"WXCo2M79yZdH","colab_type":"code","outputId":"7db5c34f-36b7-427b-c473-e7051ed7f83d","executionInfo":{"status":"ok","timestamp":1588211621205,"user_tz":300,"elapsed":409,"user":{"displayName":"Zhaoliang Zhou","photoUrl":"","userId":"11420802199847110781"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":[""],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"markdown","metadata":{"id":"rKc5uFfv-1Vn","colab_type":"text"},"source":["Try it out:"]},{"cell_type":"code","metadata":{"id":"bKPdAy9z-2Yk","colab_type":"code","outputId":"45ad0807-0968-45a8-85f0-b8fc629b15eb","executionInfo":{"status":"ok","timestamp":1556061469418,"user_tz":300,"elapsed":293,"user":{"displayName":"Zhaoliang Zhou","photoUrl":"","userId":"11420802199847110781"}},"colab":{"base_uri":"https://localhost:8080/","height":211}},"source":["print(grid)\n","findPercolation()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[[0 1 0 0 0 0 1 0 0 0]\n"," [0 0 0 0 0 0 1 0 0 0]\n"," [1 0 1 0 1 1 0 1 0 0]\n"," [0 0 0 0 0 0 1 0 0 0]\n"," [0 0 1 0 0 0 0 0 0 0]\n"," [0 0 0 1 0 1 0 0 0 1]\n"," [0 0 0 0 0 0 0 0 0 0]\n"," [0 0 0 0 0 0 0 0 0 1]\n"," [0 1 0 0 0 1 0 0 0 0]\n"," [0 1 0 1 0 0 1 1 0 0]]\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"id":"mt-Lv0R2yDnA","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3o7h2Q2AyDuX","colab_type":"text"},"source":["## Questions\n","\n","1. How does the probability of percolation depend on $p$, the probability that any individual cell is open?\n","2. How does the probability of percolation depend on $n$, the size of the grid?"]},{"cell_type":"code","metadata":{"id":"ozBC9h8ryN55","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}