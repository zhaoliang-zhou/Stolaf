{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"5/3 Markov Chain Combinatorial Optimization","version":"0.3.2","provenance":[{"file_id":"1L8p2S08SaVyIiSuax-ZHrfwsc5rg5IjY","timestamp":1556902484969},{"file_id":"1sdYLcXaQIIhDPWv0m2gBo37jHbNbNBBW","timestamp":1556565807378}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"zvAogkxxdqmb","colab_type":"text"},"source":["# Markov Chain Combinatorial Optimization\n","\n","Last time, we used a Markov chain simulation to minimize a simple function. Today, we will minimize more complicated functions."]},{"cell_type":"code","metadata":{"id":"wMF9hGNifHTV","colab_type":"code","colab":{}},"source":["import numpy as np\n","import random\n","import math\n","import matplotlib.pyplot as plt"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"j9PRWEyyd3Rs","colab_type":"text"},"source":["## A combinatorial problem\n","\n","Suppose you write the a number $N$ as the sum of $m$ non-negative integers. That is,\n","\n","$$ N = n_1 + n_2 + \\cdots + n_m $$\n","where $n_i \\ge 0$ for $i \\in \\{ 1,2,\\ldots,m \\}$. For example, for $m=4$, $N=10$ can be written as $10 = 2 + 3 + 4 + 1$, or as $10 = 5 + 0 + 2 + 3$.\n","\n","Here's a challenge: Find the sum that maximizes a function $f(n_1,n_2,\\dots,n_m)$. \n","For example, the product function $f(n_1, n_2, \\dots, n_m) = n_1 n_2 \\cdots n_m$.\n","Plenty of other examples abound, but let's use this function for now."]},{"cell_type":"markdown","metadata":{"id":"4SdfFuLakZL5","colab_type":"text"},"source":["### Implementation\n","\n","We will set up a Markov chain. A _state_ for this Markov chain will be a set of $m=10$ numbers that sum to $N=100$. "]},{"cell_type":"code","metadata":{"id":"UkHeCDwzdoDj","colab_type":"code","outputId":"b8910c47-94ce-4064-daeb-4c5cc6897f84","executionInfo":{"status":"ok","timestamp":1557085922366,"user_tz":300,"elapsed":306,"user":{"displayName":"Zhaoliang Zhou","photoUrl":"","userId":"11420802199847110781"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["N = 100\n","m = 10\n","\n","# here is one way to obtain a random state:\n","rand = random.choices(range(m), k=N)\n","state = [rand.count(i) for i in range(10)]\n","state"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[12, 12, 15, 9, 11, 7, 11, 8, 9, 6]"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"markdown","metadata":{"id":"GoKOtvCsfoXz","colab_type":"text"},"source":["_Why does this produce 10 non-negative integers that add up to 100?_"]},{"cell_type":"markdown","metadata":{"id":"Tq31L_d6oC07","colab_type":"text"},"source":["Now we want to maximize the product of any 10 non-negative integers whose sum is 100. That is, we want to maximize $f(n_0, n_1, \\dots, n_9) = n_1 n_2 \\cdots n_{10}$. However, our simulated annealing procedure from last time is designed to _minimze_ a function. We could resolve this by choosing instead to minimize the negative of the product: $g(n_0, n_1, \\dots, n_9) = -n_0 n_1 \\cdots n_9$.\n","\n","Unfortunately, a computational difficulty arises when we compute the frequency distribution in our simulated annealing procedure. Recall from last time that, when minimizing a function $g(x)$, the frequency of state $x$ was given by\n","$$p(x) = e^{-g(x)/\\sigma^2}.$$\n","\n","In our present context, a state is a tuple of 10 integers, and the function to minimize is $g(n_0, \\ldots, n_9)$ as above. Thus, we should use the frequency distribution \n","$$p(n_0, n_1, \\ldots, n_9) = e^{n_0n_1\\cdots n_9/\\sigma^2}.$$\n","Let's see how this works for a choice of 10 integers:"]},{"cell_type":"code","metadata":{"id":"a7f2tsBrBrr4","colab_type":"code","outputId":"8a1c3245-91a3-446d-926c-55fa8cd91a7a","executionInfo":{"status":"ok","timestamp":1557085924475,"user_tz":300,"elapsed":298,"user":{"displayName":"Zhaoliang Zhou","photoUrl":"","userId":"11420802199847110781"}},"colab":{"base_uri":"https://localhost:8080/","height":102}},"source":["testState = [13,5,12,11,10,7,17,6,10,9]\n","sig2 = 0.1\n","print(\"sum is:\", sum(testState))\n","print(\"product is:\", np.prod(testState))\n","print(\"frequency is:\", np.exp(np.prod(testState)/sig2) )"],"execution_count":0,"outputs":[{"output_type":"stream","text":["sum is: 100\n","product is: 5513508000\n","frequency is: inf\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:5: RuntimeWarning: overflow encountered in exp\n","  \"\"\"\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"VpVDOJmVCF7R","colab_type":"text"},"source":["The frequency is infinity? _Why?_\n","\n","The trouble is that the product $n_0n_1\\cdots n_9$ is likely to be quite large, which makes $e^{(n_0n_1\\cdots n_9)/\\sigma^2}$ extremely large. It's so large that Python cannot evaluate it!\n","\n","To resolve this problem let's modify the function we want to maximize (or minimize). Instead of maximizing the product, let's maximize the _log of the product_ $\\log (n_0n_1\\cdots n_9)$. (We can use log base $e$, or any other base you like.) Since log is an increasing function, the tuple with the maximum product is also the tuple that maximizes the log of the product.\n","\n","Of course, our product might be zero. Since the log of zero is undefined, let's just add a small positive constant to shift the product away from zero:\n","\n","$$h(n_0, n_1, \\ldots, n_9) = \\log( n_0 n_1 \\cdots n_9 + 0.1 )$$\n","\n","This function $h(n_0, \\ldots, n_9)$ is what we want to _maximize_, and its negative $-h(n_0, \\ldots, n_9)$ is what we want to _minimize_.\n","\n","The frequency distribution on states now becomes\n","$$p(n_0, n_1, \\ldots, n_9) = e^{-(-h(n_0, \\ldots, n_9))/\\sigma^2} = e^{\\log(n_0n_1\\cdots n_9 + 0.1)/\\sigma^2}.$$\n","This is good. Python should be able to evaluate this frequency on any state and obtain a positive number.\n","\n","Importantly, $p(n_0, n_1, \\ldots, n_9)$ is big whenever the product is big, and small whenever the product is small. We can also control the spread of the frequency distribution by adjusting $\\sigma^2$.\n","\n","Now define the function to minimize in Python and run some quick tests:\n"]},{"cell_type":"code","metadata":{"id":"bx8RISvgfsH8","colab_type":"code","outputId":"e5f990ba-fe97-44ca-ecf6-d6539f816241","executionInfo":{"status":"ok","timestamp":1557085927313,"user_tz":300,"elapsed":492,"user":{"displayName":"Zhaoliang Zhou","photoUrl":"","userId":"11420802199847110781"}},"colab":{"base_uri":"https://localhost:8080/","height":119}},"source":["# this is the function that we want to minimize\n","def func(state):\n","  return -1* math.log(np.prod(state) + 0.1)\n","\n","# test the function\n","sig2 = 0.2\n","print(\"state:\", testState)\n","print(\"    has function value\", func(testState), \"and frequency\", math.exp(-1*func(testState))/sig2)\n","\n","print(\"state:\", state)\n","print(\"    has function value\", func(state), \"and frequency\", math.exp(-1*func(state))/sig2)\n","\n","badState = [1,1,1,1,1,2,2,2,2,87]\n","print(\"state:\", badState)\n","print(\"    has function value\", func(badState), \"and frequency\", math.exp(-1*func(badState))/sig2)\n"],"execution_count":0,"outputs":[{"output_type":"stream","text":["state: [13, 5, 12, 11, 10, 7, 17, 6, 10, 9]\n","    has function value -22.43046691816404 and frequency 27567540000.499985\n","state: [12, 12, 15, 9, 11, 7, 11, 8, 9, 6]\n","    has function value -22.685214360924654 and frequency 35565868800.50002\n","state: [1, 1, 1, 1, 1, 2, 2, 2, 2, 87]\n","    has function value -7.238568677394522 and frequency 6960.5\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"97eE1mS8X4og","colab_type":"text"},"source":["Looks good!"]},{"cell_type":"markdown","metadata":{"id":"xYtLIDmgo2iW","colab_type":"text"},"source":["### Proposal transition\n","\n","Next, we need to decide how to propose a transition from a state to a new state.\n","Again, a state is a set of $m=10$ numbers that sum to $N=100$. \n","\n","Here is one approach. If $(n_1, n_2, \\ldots, n_{10})$ is the current state, then we can propose to transition to a new state as follows.\n","\n","* Randomly pick two indexes $i,j \\in \\{1, 2, \\ldots, 10\\}$.\n","* If $n_i > 0$, then let \n","    - $n_i = n_i - 1$\n","    - $n_j = n_j + 1$\n","* If $n_i = 0$, then do nothing.\n","\n","For example, suppose $(13, 6, 0, 16, 14, 9, 17, 6, 10, 9)$ is the current state. Randomly select, say, $i=1$ and $j=4$. In this case, we decrease $n_1$ by $1$ and increase $n_4$ by $1$. The new state becomes $(13, 5, 0, 16, 15, 9, 17, 6, 10, 9)$.\n","\n","If we select $i=2$ and $j=4$, then the new state is the same as the current state, since we can't decrease $n_2 = 0$.\n","\n","Here is an implementation. Run this several times to see it in action."]},{"cell_type":"code","metadata":{"id":"iPhvgepsKj1X","colab_type":"code","outputId":"234fd8d6-3c05-4160-cc6b-fec95ea9cee6","executionInfo":{"status":"ok","timestamp":1557091577519,"user_tz":300,"elapsed":338,"user":{"displayName":"Zhaoliang Zhou","photoUrl":"","userId":"11420802199847110781"}},"colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["print(\"state:    \", state)\n","indexes = random.sample(range(m),2)\n","print(\"indexes:  \", indexes)\n","if state[indexes[0]] > 0:\n","  state[indexes[0]] = state[indexes[0]] - 1\n","  state[indexes[1]] = state[indexes[1]] + 1\n","print(\"new state:\", state)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["state:     [10, 6, 11, 16, 3, 18, 12, 3, 13, 8]\n","indexes:   [0, 3]\n","new state: [9, 6, 11, 17, 3, 18, 12, 3, 13, 8]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"EypBG5mrp-W5","colab_type":"text"},"source":["Now package this code in a function:"]},{"cell_type":"code","metadata":{"id":"9dCQIv8Bp2nm","colab_type":"code","colab":{}},"source":["def proposal(currState):\n","  propState = currState.copy()\n","  indexes = random.sample(range(m),2)\n","  \n","  if state[indexes[0]] > 0:\n","    propState[indexes[0]] = propState[indexes[0]] - 1\n","    propState[indexes[1]] = propState[indexes[1]] + 1\n","  \n","  return propState"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"oDDQFQUjqpYU","colab_type":"text"},"source":["Now we can write the `doMove` function. Note that it looks very much like our `doMove` function from last time."]},{"cell_type":"code","metadata":{"id":"08SQeAlFqZaD","colab_type":"code","colab":{}},"source":["sig2 = 0.1\n","\n","def doMove(currState, sig2):\n","  # propose a move\n","  propState = proposal(currState)\n","  \n","  # get the function value difference\n","  dFunc = func(propState) - func(currState)\n","  \n","  # calculate rho and make a move based on the result\n","  rho = math.exp(-dFunc/sig2)\n","  rand = random.random()    # random number between 0 and 1\n","  if rand < rho:\n","    # then propState will be the new state\n","    return propState\n","  # otherwise, no transition\n","  return currState"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vEgOuHCt8BjL","colab_type":"text"},"source":["Test our function:"]},{"cell_type":"code","metadata":{"id":"rXORKZ5U8EPS","colab_type":"code","outputId":"1d2a9f4f-3f05-49df-87cb-e7eecad86a4b","executionInfo":{"status":"ok","timestamp":1557085937833,"user_tz":300,"elapsed":296,"user":{"displayName":"Zhaoliang Zhou","photoUrl":"","userId":"11420802199847110781"}},"colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["print(state)\n","state = doMove(state,sig2)\n","print(state)\n","state = doMove(state,sig2)\n","print(state)\n","state = doMove(state,sig2)\n","print(state)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[12, 12, 15, 9, 11, 6, 10, 9, 9, 7]\n","[12, 12, 15, 9, 10, 6, 10, 9, 9, 8]\n","[12, 12, 15, 9, 10, 6, 10, 10, 9, 7]\n","[12, 12, 15, 9, 10, 5, 10, 10, 9, 8]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"qtWz4pg48USs","colab_type":"text"},"source":["### Simulated annealing\n","\n","Now we can use the simulated annealing process to try to find a state that maximizes our function. Let's start with a new random state. We will need to fiddle with the control parameters `numSteps`, `sig2`, and `decFac`."]},{"cell_type":"code","metadata":{"id":"WGXgTMi-8j5m","colab_type":"code","outputId":"c7816979-04fd-4412-c536-57ececf4f6c8","executionInfo":{"status":"ok","timestamp":1557085944864,"user_tz":300,"elapsed":309,"user":{"displayName":"Zhaoliang Zhou","photoUrl":"","userId":"11420802199847110781"}},"colab":{"base_uri":"https://localhost:8080/","height":102}},"source":["numSteps = 1000\n","\n","# choose a random starting state\n","rand = random.choices(range(m), k=N)\n","state = [rand.count(i) for i in range(10)]\n","print(\"starting state:\", state)\n","print(\"product:\", np.prod(state))\n","\n","sig2 = 1\n","decFac = 0.9999\n","\n","for i in range(numSteps):\n","  state = doMove(state, sig2)\n","  \n","  # slowly decrease sig2\n","  sig2 = sig2*decFac\n","  \n","# done! print some results\n","print(\"final sig2:\", sig2)\n","print(\"final state:\", state)\n","print(\"final product:\", np.prod(state))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["starting state: [6, 14, 12, 11, 5, 12, 11, 5, 14, 10]\n","product: 5122656000\n","final sig2: 0.9048328935585562\n","final state: [10, 6, 11, 16, 3, 18, 12, 3, 13, 8]\n","final product: 2134978560\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"fs38qF349Cua","colab_type":"text"},"source":["### Your turn\n","\n","Adjust the values of `numSteps`, `sig2`, and `decFac` in the code above to find the state with the largest product.\n","\n","Then change `N` and `m`, and see how `numSteps`, `sig2`, and `decFac` need to be adjusted."]},{"cell_type":"markdown","metadata":{"id":"9__b_k419WD9","colab_type":"text"},"source":["## Exercise\n","\n","There are lots of other interesting functions to try maximizing or minimizing. Try maximizing the average of the squares:\n","$$ f(n_1, n_2, \\dots, n_m) = \\frac{1}{m}\\sum_{i=1}^m n_i^2 $$\n","There isn't too much different here, but you will need to think about the initial value of $\\sigma^2$ and how to decrease it properly."]},{"cell_type":"markdown","metadata":{"id":"3cHOi6RD9k1v","colab_type":"text"},"source":["## Assignment: Magic Squares\n","\n","A $3 \\times 3$ magic square is an arrangement of the numbers $1, 2, \\ldots, 9$ in a $3 \\times 3$ grid in such way that all the rows, columns, and diagonals have the same sum. Note there are 3 rows, 3 columns, and 2 diagonals &mdash; hence 8 sums total. For example:\n"," \n"," $$\\begin{array}{|c|c|c|}\n"," \\hline\n"," 4 & 9 & 2\\\\\n"," \\hline\n"," 3 & 5 & 7\\\\\n"," \\hline\n"," 8 & 1 & 6\\\\\n"," \\hline\n"," \\end{array} $$\n","Here, all the rows, columns, and diagonals sum to 15.\n","\n","#### Find a magic square using simulated annealing!\n","\n","* State space: All possible assignments of $1, 2, \\dots, 9$ to the $3 \\times 3$ grid.\n","* Function to minimize: Something which indicate how far the 8 sums (that is, the three row, three column, and two diagonal sums) are from the desired value of 15. \n","* Proposal transition: It works well to have the following two different types of transitions:\n","    - Pick two of the 9 sites and swap the values.\n","    - Pick two rows or two columns and swap them.\n","  \n","  That is, propose a transition by _either_ swapping the values in two sites *or* swapping two rows or columns.\n","  \n","Some details follow.\n","\n","#### Starting state\n","\n","Here is a simple way to create a random starting state. It almost certainly will not be magic!\n","\n","`np.random.choice(range(1,10), (3,3), replace=False)`\n","\n","#### Function to minimize\n","\n","The function to minimize is critically important. A good idea is to create a function that first calculates the 8 row, column, and diagonal sums. Then for each of these values, determine (in absolute) value, how far they are from 15. The return value can be the mean (or max) of these distances.\n","\n","#### Proposal transition\n","\n","It might seem sufficient to just swap entries around, but it turns out that it's easy to get stuck in a bad square for which no swap will really improve things. A better idea is to randomly either swap sites or swap rows/columns.\n","\n","* Swap sites: Pick two sites in the $3\\times 3$ grid and just flip the entries. For example, you could pick the (1,2) site to swap with the (3,3) site. That means,\n","\n","$$\\begin{array}{|c|c|c|}\n"," \\hline\n"," 1&\\mathbf{2}&5\\\\\n"," \\hline\n"," 3&7&6\\\\\n"," \\hline\n"," 8&4&\\mathbf{9}\\\\\n"," \\hline\n"," \\end{array}\\rightarrow\\begin{array}{|c|c|c|}\n"," \\hline\n"," 1&\\mathbf{9}&5\\\\\n"," \\hline\n"," 3&7&6\\\\\n"," \\hline\n"," 8&4&\\mathbf{2}\\\\\n"," \\hline\n"," \\end{array}\n"," $$\n"," \n","* Swap rows or columns: Pick two rows (or columns) and flip the rows/columns. For example, swap the top and middle rows:\n","\n","$$\\begin{array}{|c|c|c|}\n"," \\hline\n","  1&2&5\\\\\n"," \\hline\n"," 3&7&6\\\\\n"," \\hline\n"," 8&4&9\\\\\n"," \\hline\n"," \\end{array}\\rightarrow\\begin{array}{|c|c|c|}\n"," \\hline\n","  3&7&6\\\\\n"," \\hline\n"," 1&2&5\\\\\n"," \\hline\n"," 8&4&9\\\\\n"," \\hline\n"," \\end{array}\n"," $$\n"," \n","Hence your move function will have to make a few choices:\n","\n","* Do you swap sites or row/columns?. \n","* If you are swapping sites, which two sites?\n","* If you are swapping row/columns, then decide on rows versus columns. The decide with pair or rows (or columns) to swap.\n","\n","You might want to write two functions, `swapSites` and `swapRowCols`, and then blend these into your `proposal` function.\n","\n","#### Handing in your work\n","\n","Submit your work to the Magic Squares assignment on Moodle. \n","Your work should be a PDF copy of your Colab notebook. If some content doesn't appear properly in the PDF, the include a link to your Colab notebook in the text field on the Moodle assignment submission page.\n","\n","This is an assignment, not a project—it is not necessary to provide a lot of discussion about your answers.\n","This assignment is due on Monday, May 6."]},{"cell_type":"code","metadata":{"id":"0zOeK7_8sGSI","colab_type":"code","outputId":"1c48777f-824f-4d35-f648-c8fd6ad22855","executionInfo":{"status":"ok","timestamp":1557086154742,"user_tz":300,"elapsed":335,"user":{"displayName":"Zhaoliang Zhou","photoUrl":"","userId":"11420802199847110781"}},"colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["StartM = np.random.choice(range(1,10), (3,3), replace=False)\n","StartM"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[4, 2, 8],\n","       [3, 5, 6],\n","       [1, 7, 9]])"]},"metadata":{"tags":[]},"execution_count":28}]},{"cell_type":"markdown","metadata":{"id":"gZBRY8fnv0W4","colab_type":"text"},"source":["column sum "]},{"cell_type":"code","metadata":{"id":"flPKUmQnu4jT","colab_type":"code","outputId":"c7018b47-3ef7-4b4f-c4e2-3582a084e8e5","executionInfo":{"status":"error","timestamp":1557086195469,"user_tz":300,"elapsed":336,"user":{"displayName":"Zhaoliang Zhou","photoUrl":"","userId":"11420802199847110781"}},"colab":{"base_uri":"https://localhost:8080/","height":340}},"source":["print(StartM[:,0]) #column sum\n","sum(StartM[:,0])"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[4 3 1]\n"],"name":"stdout"},{"output_type":"error","ename":"IndexError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-32-f0041f119350>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mStartM\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m#column sum\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mStartM\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-21-317a7d5e1b62>\u001b[0m in \u001b[0;36msum\u001b[0;34m(matrix)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmatrix\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m   \u001b[0mrow0\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmatrix\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m   \u001b[0mdiff1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mabs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow0\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m15\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m   \u001b[0mrow1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmatrix\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-21-317a7d5e1b62>\u001b[0m in \u001b[0;36msum\u001b[0;34m(matrix)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmatrix\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m   \u001b[0mrow0\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmatrix\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m   \u001b[0mdiff1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mabs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow0\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m15\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m   \u001b[0mrow1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmatrix\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mIndexError\u001b[0m: invalid index to scalar variable."]}]},{"cell_type":"markdown","metadata":{"id":"i4bQgiCZv2xY","colab_type":"text"},"source":["Row sum"]},{"cell_type":"code","metadata":{"id":"3Uj5CXH3sGVJ","colab_type":"code","outputId":"9eaa9d97-dfb7-48bf-b818-4fd4c1a5be29","executionInfo":{"status":"error","timestamp":1557086141267,"user_tz":300,"elapsed":324,"user":{"displayName":"Zhaoliang Zhou","photoUrl":"","userId":"11420802199847110781"}},"colab":{"base_uri":"https://localhost:8080/","height":340}},"source":["print(StartM[0])\n","sum(StartM[0])"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[2 6 9]\n"],"name":"stdout"},{"output_type":"error","ename":"IndexError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-25-ee0d58c82461>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mStartM\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mStartM\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-21-317a7d5e1b62>\u001b[0m in \u001b[0;36msum\u001b[0;34m(matrix)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmatrix\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m   \u001b[0mrow0\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmatrix\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m   \u001b[0mdiff1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mabs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow0\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m15\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m   \u001b[0mrow1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmatrix\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-21-317a7d5e1b62>\u001b[0m in \u001b[0;36msum\u001b[0;34m(matrix)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmatrix\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m   \u001b[0mrow0\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmatrix\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m   \u001b[0mdiff1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mabs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow0\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m15\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m   \u001b[0mrow1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmatrix\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mIndexError\u001b[0m: invalid index to scalar variable."]}]},{"cell_type":"code","metadata":{"id":"YL4aKMvEvs98","colab_type":"code","outputId":"458b4942-0fb7-4347-cdbe-a0911eedf43f","executionInfo":{"status":"ok","timestamp":1557086009201,"user_tz":300,"elapsed":272,"user":{"displayName":"Zhaoliang Zhou","photoUrl":"","userId":"11420802199847110781"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["StartM.diagonal().sum() #diagnal sum, only diagonal from left to right\n","\n"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["6"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"id":"nqzQRu1cvtAa","colab_type":"code","colab":{}},"source":["max(abs(sum))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"JjszM2h-vtC8","colab_type":"code","colab":{}},"source":["def diagonal(matrix, )"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"xXXGXmmJyqyD","colab_type":"code","outputId":"1f57a9e2-0dda-4806-eb4a-58f66af36994","executionInfo":{"status":"ok","timestamp":1557086019189,"user_tz":300,"elapsed":545,"user":{"displayName":"Zhaoliang Zhou","photoUrl":"","userId":"11420802199847110781"}},"colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["print(StartM[0][-1])\n","print(StartM[1][-2])\n","print(StartM[2][-3])"],"execution_count":0,"outputs":[{"output_type":"stream","text":["9\n","3\n","7\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"v5NcZmNXyq0k","colab_type":"code","outputId":"2999dc8b-0cc6-48cc-f03c-597547f5f146","executionInfo":{"status":"error","timestamp":1557086179455,"user_tz":300,"elapsed":413,"user":{"displayName":"Zhaoliang Zhou","photoUrl":"","userId":"11420802199847110781"}},"colab":{"base_uri":"https://localhost:8080/","height":374}},"source":["  matrix = np.random.choice(range(1,10), (3,3), replace=False)\n","  row0 = sum(matrix[0])\n","  diff1 = abs(row0-15)\n","  \n","  row1 = sum(matrix[1])\n","  diff2 = abs(row - 15)\n","  \n","  row2 = sum(matrix[2])\n","  diff3 = abs(row2 - 15)\n","  \n","  col0 = sum(matrix[:,0])\n","  diff4 = abs(col0 - 15)\n","  \n","  col1 = sum(matrix[:,1])\n","  diff5 = abs(col1 - 15)\n","  \n","  col2 = sum(matrix[:,2])\n","  diff6 = abs(col2 - 15)\n","  \n","  diag1 = matrix.diagonal().sum()\n","  diff7 = abs(diag1 - 15)\n","  \n","  diag2 = matrix[0][-1] + matrix[1][-2] + matrix[2][-3]\n","  diff8 = abs(diag2 - 15)\n","  \n","  diff1 + diff2 + diff3 + diff4 + diff5 + diff6 + diff7 + diff8"],"execution_count":0,"outputs":[{"output_type":"error","ename":"IndexError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-30-481832bb8ace>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mmatrix\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mchoice\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mrow0\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmatrix\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mdiff1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mabs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow0\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m15\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mrow1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmatrix\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-21-317a7d5e1b62>\u001b[0m in \u001b[0;36msum\u001b[0;34m(matrix)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmatrix\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m   \u001b[0mrow0\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmatrix\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m   \u001b[0mdiff1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mabs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow0\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m15\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m   \u001b[0mrow1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmatrix\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-21-317a7d5e1b62>\u001b[0m in \u001b[0;36msum\u001b[0;34m(matrix)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmatrix\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m   \u001b[0mrow0\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmatrix\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m   \u001b[0mdiff1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mabs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow0\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m15\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m   \u001b[0mrow1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmatrix\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mIndexError\u001b[0m: invalid index to scalar variable."]}]},{"cell_type":"code","metadata":{"id":"AsT-IVg-yq26","colab_type":"code","outputId":"66a0bd11-61ae-4776-fa49-5d118b50cee2","executionInfo":{"status":"error","timestamp":1557086027865,"user_tz":300,"elapsed":265,"user":{"displayName":"Zhaoliang Zhou","photoUrl":"","userId":"11420802199847110781"}},"colab":{"base_uri":"https://localhost:8080/","height":306}},"source":[""],"execution_count":0,"outputs":[{"output_type":"error","ename":"IndexError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-19-a60771657afd>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mStartM\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-18-317a7d5e1b62>\u001b[0m in \u001b[0;36msum\u001b[0;34m(matrix)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmatrix\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m   \u001b[0mrow0\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmatrix\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m   \u001b[0mdiff1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mabs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow0\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m15\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m   \u001b[0mrow1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmatrix\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-18-317a7d5e1b62>\u001b[0m in \u001b[0;36msum\u001b[0;34m(matrix)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmatrix\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m   \u001b[0mrow0\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmatrix\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m   \u001b[0mdiff1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mabs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow0\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m15\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m   \u001b[0mrow1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmatrix\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-18-317a7d5e1b62>\u001b[0m in \u001b[0;36msum\u001b[0;34m(matrix)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmatrix\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m   \u001b[0mrow0\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmatrix\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m   \u001b[0mdiff1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mabs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow0\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m15\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m   \u001b[0mrow1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmatrix\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mIndexError\u001b[0m: invalid index to scalar variable."]}]},{"cell_type":"code","metadata":{"id":"wJv4Hveor2Ip","colab_type":"code","outputId":"a9955bc4-1236-4f9b-cf4f-57894b2d32cb","executionInfo":{"status":"ok","timestamp":1556903640741,"user_tz":300,"elapsed":337,"user":{"displayName":"Zhaoliang Zhou","photoUrl":"","userId":"11420802199847110781"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["a=5\n","b=3\n","a,b=b,a\n","\n","print(\"a:\",a)\n","print(\"b:\",b)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["a: 3\n","b: 5\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Hgqv40Bbr5DR","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"KCF8RnSGs66w","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZU6CcnV-trO8","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}